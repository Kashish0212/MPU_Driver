
MPU_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fa0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007134  08007134  00017134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007194  08007194  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007194  08007194  00017194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800719c  0800719c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071a0  080071a0  000171a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080071a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001480  200000fc  080072a0  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000157c  080072a0  0002157c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000103e2  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002daa  00000000  00000000  00030551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  00033300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a93  00000000  00000000  000340f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000175c5  00000000  00000000  00034b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013631  00000000  00000000  0004c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008861a  00000000  00000000  0005f781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000393c  00000000  00000000  000e7d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000eb6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800711c 	.word	0x0800711c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	0800711c 	.word	0x0800711c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 f9e6 	bl	80008a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f808 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8a2 	bl	8000624 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e0:	f000 f872 	bl	80005c8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80004e4:	f006 f904 	bl	80066f0 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <main+0x18>
	...

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b094      	sub	sp, #80	; 0x50
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0320 	add.w	r3, r7, #32
 80004f6:	2230      	movs	r2, #48	; 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f006 fde2 	bl	80070c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	2300      	movs	r3, #0
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	4b2a      	ldr	r3, [pc, #168]	; (80005c0 <SystemClock_Config+0xd4>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000518:	4a29      	ldr	r2, [pc, #164]	; (80005c0 <SystemClock_Config+0xd4>)
 800051a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051e:	6413      	str	r3, [r2, #64]	; 0x40
 8000520:	4b27      	ldr	r3, [pc, #156]	; (80005c0 <SystemClock_Config+0xd4>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	4b24      	ldr	r3, [pc, #144]	; (80005c4 <SystemClock_Config+0xd8>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000538:	4a22      	ldr	r2, [pc, #136]	; (80005c4 <SystemClock_Config+0xd8>)
 800053a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <SystemClock_Config+0xd8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800054c:	2303      	movs	r3, #3
 800054e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000554:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000556:	2301      	movs	r3, #1
 8000558:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055a:	2310      	movs	r3, #16
 800055c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000562:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000568:	230f      	movs	r3, #15
 800056a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800056c:	2390      	movs	r3, #144	; 0x90
 800056e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000570:	2302      	movs	r3, #2
 8000572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000574:	2305      	movs	r3, #5
 8000576:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0320 	add.w	r3, r7, #32
 800057c:	4618      	mov	r0, r3
 800057e:	f002 f8a3 	bl	80026c8 <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000588:	f000 f89e 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fb06 	bl	8002bb8 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005b2:	f000 f889 	bl	80006c8 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3750      	adds	r7, #80	; 0x50
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40007000 	.word	0x40007000

080005c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <MX_I2C1_Init+0x50>)
 80005ce:	4a13      	ldr	r2, [pc, #76]	; (800061c <MX_I2C1_Init+0x54>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_I2C1_Init+0x50>)
 80005d4:	4a12      	ldr	r2, [pc, #72]	; (8000620 <MX_I2C1_Init+0x58>)
 80005d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_I2C1_Init+0x50>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_I2C1_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_I2C1_Init+0x50>)
 80005e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_I2C1_Init+0x50>)
 8000606:	f000 fc9d 	bl	8000f44 <HAL_I2C_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000610:	f000 f85a 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000118 	.word	0x20000118
 800061c:	40005400 	.word	0x40005400
 8000620:	000186a0 	.word	0x000186a0

08000624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <MX_GPIO_Init+0x9c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a1f      	ldr	r2, [pc, #124]	; (80006c0 <MX_GPIO_Init+0x9c>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MX_GPIO_Init+0x9c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_GPIO_Init+0x9c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <MX_GPIO_Init+0x9c>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_GPIO_Init+0x9c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_GPIO_Init+0x9c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a11      	ldr	r2, [pc, #68]	; (80006c0 <MX_GPIO_Init+0x9c>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_GPIO_Init+0x9c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800068e:	2302      	movs	r3, #2
 8000690:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000692:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	4619      	mov	r1, r3
 80006a2:	4808      	ldr	r0, [pc, #32]	; (80006c4 <MX_GPIO_Init+0xa0>)
 80006a4:	f000 faa6 	bl	8000bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2100      	movs	r1, #0
 80006ac:	2007      	movs	r0, #7
 80006ae:	f000 fa6a 	bl	8000b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80006b2:	2007      	movs	r0, #7
 80006b4:	f000 fa83 	bl	8000bbe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020000 	.word	0x40020000

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>
	...

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <HAL_MspInit+0x4c>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e2:	4a0f      	ldr	r2, [pc, #60]	; (8000720 <HAL_MspInit+0x4c>)
 80006e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <HAL_MspInit+0x4c>)
 80006ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_MspInit+0x4c>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <HAL_MspInit+0x4c>)
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	6413      	str	r3, [r2, #64]	; 0x40
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_MspInit+0x4c>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800

08000724 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <HAL_I2C_MspInit+0x84>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d12b      	bne.n	800079e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <HAL_I2C_MspInit+0x88>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a17      	ldr	r2, [pc, #92]	; (80007ac <HAL_I2C_MspInit+0x88>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_I2C_MspInit+0x88>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000762:	23c0      	movs	r3, #192	; 0xc0
 8000764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000766:	2312      	movs	r3, #18
 8000768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000772:	2304      	movs	r3, #4
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <HAL_I2C_MspInit+0x8c>)
 800077e:	f000 fa39 	bl	8000bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <HAL_I2C_MspInit+0x88>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	4a08      	ldr	r2, [pc, #32]	; (80007ac <HAL_I2C_MspInit+0x88>)
 800078c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000790:	6413      	str	r3, [r2, #64]	; 0x40
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <HAL_I2C_MspInit+0x88>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800079e:	bf00      	nop
 80007a0:	3728      	adds	r7, #40	; 0x28
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40005400 	.word	0x40005400
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020400 	.word	0x40020400

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <NMI_Handler+0x4>

080007ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <MemManage_Handler+0x4>

080007c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000800:	f000 f8a2 	bl	8000948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}

08000808 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800080c:	2002      	movs	r0, #2
 800080e:	f000 fb75 	bl	8000efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <OTG_FS_IRQHandler+0x10>)
 800081e:	f000 fe25 	bl	800146c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000e50 	.word	0x20000e50

0800082c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <SystemInit+0x20>)
 8000832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <SystemInit+0x20>)
 8000838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800083c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000888 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000856:	490e      	ldr	r1, [pc, #56]	; (8000890 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000858:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800085c:	e002      	b.n	8000864 <LoopCopyDataInit>

0800085e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000862:	3304      	adds	r3, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000868:	d3f9      	bcc.n	800085e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800086c:	4c0b      	ldr	r4, [pc, #44]	; (800089c <LoopFillZerobss+0x26>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000870:	e001      	b.n	8000876 <LoopFillZerobss>

08000872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000874:	3204      	adds	r2, #4

08000876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000878:	d3fb      	bcc.n	8000872 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800087a:	f7ff ffd7 	bl	800082c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800087e:	f006 fc29 	bl	80070d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000882:	f7ff fe25 	bl	80004d0 <main>
  bx  lr    
 8000886:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000888:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800088c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000890:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000894:	080071a4 	.word	0x080071a4
  ldr r2, =_sbss
 8000898:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 800089c:	2000157c 	.word	0x2000157c

080008a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC_IRQHandler>
	...

080008a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_Init+0x40>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <HAL_Init+0x40>)
 80008ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_Init+0x40>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <HAL_Init+0x40>)
 80008ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_Init+0x40>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <HAL_Init+0x40>)
 80008c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f000 f94f 	bl	8000b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d2:	200f      	movs	r0, #15
 80008d4:	f000 f808 	bl	80008e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d8:	f7ff fefc 	bl	80006d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023c00 	.word	0x40023c00

080008e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_InitTick+0x54>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_InitTick+0x58>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000902:	fbb2 f3f3 	udiv	r3, r2, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f967 	bl	8000bda <HAL_SYSTICK_Config>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e00e      	b.n	8000934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b0f      	cmp	r3, #15
 800091a:	d80a      	bhi.n	8000932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091c:	2200      	movs	r2, #0
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	f000 f92f 	bl	8000b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000928:	4a06      	ldr	r2, [pc, #24]	; (8000944 <HAL_InitTick+0x5c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800092e:	2300      	movs	r3, #0
 8000930:	e000      	b.n	8000934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000000 	.word	0x20000000
 8000940:	20000008 	.word	0x20000008
 8000944:	20000004 	.word	0x20000004

08000948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_IncTick+0x20>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_IncTick+0x24>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4413      	add	r3, r2
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <HAL_IncTick+0x24>)
 800095a:	6013      	str	r3, [r2, #0]
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000008 	.word	0x20000008
 800096c:	2000016c 	.word	0x2000016c

08000970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return uwTick;
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <HAL_GetTick+0x14>)
 8000976:	681b      	ldr	r3, [r3, #0]
}
 8000978:	4618      	mov	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	2000016c 	.word	0x2000016c

08000988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000990:	f7ff ffee 	bl	8000970 <HAL_GetTick>
 8000994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a0:	d005      	beq.n	80009ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <HAL_Delay+0x44>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	461a      	mov	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4413      	add	r3, r2
 80009ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009ae:	bf00      	nop
 80009b0:	f7ff ffde 	bl	8000970 <HAL_GetTick>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d8f7      	bhi.n	80009b0 <HAL_Delay+0x28>
  {
  }
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000008 	.word	0x20000008

080009d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ec:	4013      	ands	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a02:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	60d3      	str	r3, [r2, #12]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <__NVIC_GetPriorityGrouping+0x18>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	f003 0307 	and.w	r3, r3, #7
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	db0b      	blt.n	8000a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	f003 021f 	and.w	r2, r3, #31
 8000a4c:	4907      	ldr	r1, [pc, #28]	; (8000a6c <__NVIC_EnableIRQ+0x38>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	095b      	lsrs	r3, r3, #5
 8000a54:	2001      	movs	r0, #1
 8000a56:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000e100 	.word	0xe000e100

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db0a      	blt.n	8000a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	490c      	ldr	r1, [pc, #48]	; (8000abc <__NVIC_SetPriority+0x4c>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a98:	e00a      	b.n	8000ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <__NVIC_SetPriority+0x50>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	761a      	strb	r2, [r3, #24]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	; 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f1c3 0307 	rsb	r3, r3, #7
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	bf28      	it	cs
 8000ae2:	2304      	movcs	r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d902      	bls.n	8000af4 <NVIC_EncodePriority+0x30>
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b03      	subs	r3, #3
 8000af2:	e000      	b.n	8000af6 <NVIC_EncodePriority+0x32>
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	401a      	ands	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	4313      	orrs	r3, r2
         );
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3724      	adds	r7, #36	; 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b3c:	d301      	bcc.n	8000b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00f      	b.n	8000b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <SysTick_Config+0x40>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f7ff ff8e 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <SysTick_Config+0x40>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <SysTick_Config+0x40>)
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	e000e010 	.word	0xe000e010

08000b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff29 	bl	80009d0 <__NVIC_SetPriorityGrouping>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b98:	f7ff ff3e 	bl	8000a18 <__NVIC_GetPriorityGrouping>
 8000b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	6978      	ldr	r0, [r7, #20]
 8000ba4:	f7ff ff8e 	bl	8000ac4 <NVIC_EncodePriority>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff5d 	bl	8000a70 <__NVIC_SetPriority>
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff31 	bl	8000a34 <__NVIC_EnableIRQ>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffa2 	bl	8000b2c <SysTick_Config>
 8000be8:	4603      	mov	r3, r0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
 8000c0e:	e159      	b.n	8000ec4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c10:	2201      	movs	r2, #1
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	f040 8148 	bne.w	8000ebe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f003 0303 	and.w	r3, r3, #3
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d005      	beq.n	8000c46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d130      	bne.n	8000ca8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	2203      	movs	r2, #3
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	68da      	ldr	r2, [r3, #12]
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	091b      	lsrs	r3, r3, #4
 8000c92:	f003 0201 	and.w	r2, r3, #1
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d017      	beq.n	8000ce4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d123      	bne.n	8000d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	08da      	lsrs	r2, r3, #3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3208      	adds	r2, #8
 8000cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	f003 0307 	and.w	r3, r3, #7
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	220f      	movs	r2, #15
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	691a      	ldr	r2, [r3, #16]
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	08da      	lsrs	r2, r3, #3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3208      	adds	r2, #8
 8000d32:	69b9      	ldr	r1, [r7, #24]
 8000d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0203 	and.w	r2, r3, #3
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 80a2 	beq.w	8000ebe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b57      	ldr	r3, [pc, #348]	; (8000edc <HAL_GPIO_Init+0x2e8>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a56      	ldr	r2, [pc, #344]	; (8000edc <HAL_GPIO_Init+0x2e8>)
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b54      	ldr	r3, [pc, #336]	; (8000edc <HAL_GPIO_Init+0x2e8>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d96:	4a52      	ldr	r2, [pc, #328]	; (8000ee0 <HAL_GPIO_Init+0x2ec>)
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	220f      	movs	r2, #15
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a49      	ldr	r2, [pc, #292]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d019      	beq.n	8000df6 <HAL_GPIO_Init+0x202>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a48      	ldr	r2, [pc, #288]	; (8000ee8 <HAL_GPIO_Init+0x2f4>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d013      	beq.n	8000df2 <HAL_GPIO_Init+0x1fe>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a47      	ldr	r2, [pc, #284]	; (8000eec <HAL_GPIO_Init+0x2f8>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d00d      	beq.n	8000dee <HAL_GPIO_Init+0x1fa>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a46      	ldr	r2, [pc, #280]	; (8000ef0 <HAL_GPIO_Init+0x2fc>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d007      	beq.n	8000dea <HAL_GPIO_Init+0x1f6>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a45      	ldr	r2, [pc, #276]	; (8000ef4 <HAL_GPIO_Init+0x300>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <HAL_GPIO_Init+0x1f2>
 8000de2:	2304      	movs	r3, #4
 8000de4:	e008      	b.n	8000df8 <HAL_GPIO_Init+0x204>
 8000de6:	2307      	movs	r3, #7
 8000de8:	e006      	b.n	8000df8 <HAL_GPIO_Init+0x204>
 8000dea:	2303      	movs	r3, #3
 8000dec:	e004      	b.n	8000df8 <HAL_GPIO_Init+0x204>
 8000dee:	2302      	movs	r3, #2
 8000df0:	e002      	b.n	8000df8 <HAL_GPIO_Init+0x204>
 8000df2:	2301      	movs	r3, #1
 8000df4:	e000      	b.n	8000df8 <HAL_GPIO_Init+0x204>
 8000df6:	2300      	movs	r3, #0
 8000df8:	69fa      	ldr	r2, [r7, #28]
 8000dfa:	f002 0203 	and.w	r2, r2, #3
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	4093      	lsls	r3, r2
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e08:	4935      	ldr	r1, [pc, #212]	; (8000ee0 <HAL_GPIO_Init+0x2ec>)
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	089b      	lsrs	r3, r3, #2
 8000e0e:	3302      	adds	r3, #2
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e16:	4b38      	ldr	r3, [pc, #224]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e3a:	4a2f      	ldr	r2, [pc, #188]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e40:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e64:	4a24      	ldr	r2, [pc, #144]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e8e:	4a1a      	ldr	r2, [pc, #104]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eb8:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	61fb      	str	r3, [r7, #28]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	2b0f      	cmp	r3, #15
 8000ec8:	f67f aea2 	bls.w	8000c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3724      	adds	r7, #36	; 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40013800 	.word	0x40013800
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020400 	.word	0x40020400
 8000eec:	40020800 	.word	0x40020800
 8000ef0:	40020c00 	.word	0x40020c00
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40013c00 	.word	0x40013c00

08000efc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f08:	695a      	ldr	r2, [r3, #20]
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d006      	beq.n	8000f20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f12:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f806 	bl	8000f2c <HAL_GPIO_EXTI_Callback>
  }
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40013c00 	.word	0x40013c00

08000f2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e12b      	b.n	80011ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d106      	bne.n	8000f70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff fbda 	bl	8000724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2224      	movs	r2, #36	; 0x24
 8000f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 0201 	bic.w	r2, r2, #1
 8000f86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000fa8:	f001 ffbe 	bl	8002f28 <HAL_RCC_GetPCLK1Freq>
 8000fac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	4a81      	ldr	r2, [pc, #516]	; (80011b8 <HAL_I2C_Init+0x274>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d807      	bhi.n	8000fc8 <HAL_I2C_Init+0x84>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4a80      	ldr	r2, [pc, #512]	; (80011bc <HAL_I2C_Init+0x278>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	bf94      	ite	ls
 8000fc0:	2301      	movls	r3, #1
 8000fc2:	2300      	movhi	r3, #0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	e006      	b.n	8000fd6 <HAL_I2C_Init+0x92>
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4a7d      	ldr	r2, [pc, #500]	; (80011c0 <HAL_I2C_Init+0x27c>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	bf94      	ite	ls
 8000fd0:	2301      	movls	r3, #1
 8000fd2:	2300      	movhi	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e0e7      	b.n	80011ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4a78      	ldr	r2, [pc, #480]	; (80011c4 <HAL_I2C_Init+0x280>)
 8000fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe6:	0c9b      	lsrs	r3, r3, #18
 8000fe8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	4a6a      	ldr	r2, [pc, #424]	; (80011b8 <HAL_I2C_Init+0x274>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d802      	bhi.n	8001018 <HAL_I2C_Init+0xd4>
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	3301      	adds	r3, #1
 8001016:	e009      	b.n	800102c <HAL_I2C_Init+0xe8>
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800101e:	fb02 f303 	mul.w	r3, r2, r3
 8001022:	4a69      	ldr	r2, [pc, #420]	; (80011c8 <HAL_I2C_Init+0x284>)
 8001024:	fba2 2303 	umull	r2, r3, r2, r3
 8001028:	099b      	lsrs	r3, r3, #6
 800102a:	3301      	adds	r3, #1
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	6812      	ldr	r2, [r2, #0]
 8001030:	430b      	orrs	r3, r1
 8001032:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800103e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	495c      	ldr	r1, [pc, #368]	; (80011b8 <HAL_I2C_Init+0x274>)
 8001048:	428b      	cmp	r3, r1
 800104a:	d819      	bhi.n	8001080 <HAL_I2C_Init+0x13c>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	1e59      	subs	r1, r3, #1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fbb1 f3f3 	udiv	r3, r1, r3
 800105a:	1c59      	adds	r1, r3, #1
 800105c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001060:	400b      	ands	r3, r1
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00a      	beq.n	800107c <HAL_I2C_Init+0x138>
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	1e59      	subs	r1, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fbb1 f3f3 	udiv	r3, r1, r3
 8001074:	3301      	adds	r3, #1
 8001076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800107a:	e051      	b.n	8001120 <HAL_I2C_Init+0x1dc>
 800107c:	2304      	movs	r3, #4
 800107e:	e04f      	b.n	8001120 <HAL_I2C_Init+0x1dc>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d111      	bne.n	80010ac <HAL_I2C_Init+0x168>
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	1e58      	subs	r0, r3, #1
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6859      	ldr	r1, [r3, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	440b      	add	r3, r1
 8001096:	fbb0 f3f3 	udiv	r3, r0, r3
 800109a:	3301      	adds	r3, #1
 800109c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf0c      	ite	eq
 80010a4:	2301      	moveq	r3, #1
 80010a6:	2300      	movne	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	e012      	b.n	80010d2 <HAL_I2C_Init+0x18e>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	1e58      	subs	r0, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6859      	ldr	r1, [r3, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	0099      	lsls	r1, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	fbb0 f3f3 	udiv	r3, r0, r3
 80010c2:	3301      	adds	r3, #1
 80010c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	bf0c      	ite	eq
 80010cc:	2301      	moveq	r3, #1
 80010ce:	2300      	movne	r3, #0
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_I2C_Init+0x196>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e022      	b.n	8001120 <HAL_I2C_Init+0x1dc>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10e      	bne.n	8001100 <HAL_I2C_Init+0x1bc>
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	1e58      	subs	r0, r3, #1
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6859      	ldr	r1, [r3, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	440b      	add	r3, r1
 80010f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80010f4:	3301      	adds	r3, #1
 80010f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010fe:	e00f      	b.n	8001120 <HAL_I2C_Init+0x1dc>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	1e58      	subs	r0, r3, #1
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6859      	ldr	r1, [r3, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	0099      	lsls	r1, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	fbb0 f3f3 	udiv	r3, r0, r3
 8001116:	3301      	adds	r3, #1
 8001118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800111c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	6809      	ldr	r1, [r1, #0]
 8001124:	4313      	orrs	r3, r2
 8001126:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69da      	ldr	r2, [r3, #28]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	431a      	orrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800114e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	6911      	ldr	r1, [r2, #16]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68d2      	ldr	r2, [r2, #12]
 800115a:	4311      	orrs	r1, r2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	430b      	orrs	r3, r1
 8001162:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0201 	orr.w	r2, r2, #1
 800118e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2220      	movs	r2, #32
 800119a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	000186a0 	.word	0x000186a0
 80011bc:	001e847f 	.word	0x001e847f
 80011c0:	003d08ff 	.word	0x003d08ff
 80011c4:	431bde83 	.word	0x431bde83
 80011c8:	10624dd3 	.word	0x10624dd3

080011cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ce:	b08f      	sub	sp, #60	; 0x3c
 80011d0:	af0a      	add	r7, sp, #40	; 0x28
 80011d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e10f      	b.n	80013fe <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d106      	bne.n	80011fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f005 fc59 	bl	8006ab0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2203      	movs	r2, #3
 8001202:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800120a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120e:	2b00      	cmp	r3, #0
 8001210:	d102      	bne.n	8001218 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f001 ffac 	bl	800317a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	687e      	ldr	r6, [r7, #4]
 800122a:	466d      	mov	r5, sp
 800122c:	f106 0410 	add.w	r4, r6, #16
 8001230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001238:	e894 0003 	ldmia.w	r4, {r0, r1}
 800123c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001240:	1d33      	adds	r3, r6, #4
 8001242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001244:	6838      	ldr	r0, [r7, #0]
 8001246:	f001 fe83 	bl	8002f50 <USB_CoreInit>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d005      	beq.n	800125c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2202      	movs	r2, #2
 8001254:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0d0      	b.n	80013fe <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f001 ff9a 	bl	800319c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e04a      	b.n	8001304 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800126e:	7bfa      	ldrb	r2, [r7, #15]
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4413      	add	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	440b      	add	r3, r1
 800127c:	333d      	adds	r3, #61	; 0x3d
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001282:	7bfa      	ldrb	r2, [r7, #15]
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	4413      	add	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	440b      	add	r3, r1
 8001290:	333c      	adds	r3, #60	; 0x3c
 8001292:	7bfa      	ldrb	r2, [r7, #15]
 8001294:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001296:	7bfa      	ldrb	r2, [r7, #15]
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	b298      	uxth	r0, r3
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	3344      	adds	r3, #68	; 0x44
 80012aa:	4602      	mov	r2, r0
 80012ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012ae:	7bfa      	ldrb	r2, [r7, #15]
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	4413      	add	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	440b      	add	r3, r1
 80012bc:	3340      	adds	r3, #64	; 0x40
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4413      	add	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	3348      	adds	r3, #72	; 0x48
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012d6:	7bfa      	ldrb	r2, [r7, #15]
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	334c      	adds	r3, #76	; 0x4c
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012ea:	7bfa      	ldrb	r2, [r7, #15]
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	4413      	add	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	440b      	add	r3, r1
 80012f8:	3354      	adds	r3, #84	; 0x54
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	3301      	adds	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	d3af      	bcc.n	800126e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800130e:	2300      	movs	r3, #0
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	e044      	b.n	800139e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001314:	7bfa      	ldrb	r2, [r7, #15]
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800132a:	7bfa      	ldrb	r2, [r7, #15]
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	4413      	add	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001340:	7bfa      	ldrb	r2, [r7, #15]
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001356:	7bfa      	ldrb	r2, [r7, #15]
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4413      	add	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	440b      	add	r3, r1
 8001364:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800136c:	7bfa      	ldrb	r2, [r7, #15]
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001382:	7bfa      	ldrb	r2, [r7, #15]
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4413      	add	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	440b      	add	r3, r1
 8001390:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	3301      	adds	r3, #1
 800139c:	73fb      	strb	r3, [r7, #15]
 800139e:	7bfa      	ldrb	r2, [r7, #15]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d3b5      	bcc.n	8001314 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	687e      	ldr	r6, [r7, #4]
 80013b0:	466d      	mov	r5, sp
 80013b2:	f106 0410 	add.w	r4, r6, #16
 80013b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80013c6:	1d33      	adds	r3, r6, #4
 80013c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ca:	6838      	ldr	r0, [r7, #0]
 80013cc:	f001 ff32 	bl	8003234 <USB_DevInit>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2202      	movs	r2, #2
 80013da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e00d      	b.n	80013fe <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 f881 	bl	80044fe <USB_DevDisconnect>

  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001406 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b084      	sub	sp, #16
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_PCD_Start+0x1c>
 800141e:	2302      	movs	r3, #2
 8001420:	e020      	b.n	8001464 <HAL_PCD_Start+0x5e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142e:	2b01      	cmp	r3, #1
 8001430:	d109      	bne.n	8001446 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001436:	2b01      	cmp	r3, #1
 8001438:	d005      	beq.n	8001446 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f001 fe84 	bl	8003158 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f003 f831 	bl	80044bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b08d      	sub	sp, #52	; 0x34
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800147a:	6a3b      	ldr	r3, [r7, #32]
 800147c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f003 f8ef 	bl	8004666 <USB_GetMode>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	f040 848a 	bne.w	8001da4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f003 f853 	bl	8004540 <USB_ReadInterrupts>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 8480 	beq.w	8001da2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	0a1b      	lsrs	r3, r3, #8
 80014ac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 f840 	bl	8004540 <USB_ReadInterrupts>
 80014c0:	4603      	mov	r3, r0
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d107      	bne.n	80014da <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	695a      	ldr	r2, [r3, #20]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f002 0202 	and.w	r2, r2, #2
 80014d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 f82e 	bl	8004540 <USB_ReadInterrupts>
 80014e4:	4603      	mov	r3, r0
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	2b10      	cmp	r3, #16
 80014ec:	d161      	bne.n	80015b2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	699a      	ldr	r2, [r3, #24]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0210 	bic.w	r2, r2, #16
 80014fc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80014fe:	6a3b      	ldr	r3, [r7, #32]
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	f003 020f 	and.w	r2, r3, #15
 800150a:	4613      	mov	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	3304      	adds	r3, #4
 800151c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	0c5b      	lsrs	r3, r3, #17
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	2b02      	cmp	r3, #2
 8001528:	d124      	bne.n	8001574 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001530:	4013      	ands	r3, r2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d035      	beq.n	80015a2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001540:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001544:	b29b      	uxth	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	6a38      	ldr	r0, [r7, #32]
 800154a:	f002 fe65 	bl	8004218 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	691a      	ldr	r2, [r3, #16]
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800155a:	441a      	add	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	6a1a      	ldr	r2, [r3, #32]
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800156c:	441a      	add	r2, r3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	621a      	str	r2, [r3, #32]
 8001572:	e016      	b.n	80015a2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	0c5b      	lsrs	r3, r3, #17
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	2b06      	cmp	r3, #6
 800157e:	d110      	bne.n	80015a2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001586:	2208      	movs	r2, #8
 8001588:	4619      	mov	r1, r3
 800158a:	6a38      	ldr	r0, [r7, #32]
 800158c:	f002 fe44 	bl	8004218 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	6a1a      	ldr	r2, [r3, #32]
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	091b      	lsrs	r3, r3, #4
 8001598:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800159c:	441a      	add	r2, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	699a      	ldr	r2, [r3, #24]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f042 0210 	orr.w	r2, r2, #16
 80015b0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 ffc2 	bl	8004540 <USB_ReadInterrupts>
 80015bc:	4603      	mov	r3, r0
 80015be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015c6:	f040 80a7 	bne.w	8001718 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 ffc7 	bl	8004566 <USB_ReadDevAllOutEpInterrupt>
 80015d8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80015da:	e099      	b.n	8001710 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 808e 	beq.w	8001704 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 ffeb 	bl	80045ce <USB_ReadDevOutEPInterrupt>
 80015f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00c      	beq.n	800161e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	015a      	lsls	r2, r3, #5
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	4413      	add	r3, r2
 800160c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001610:	461a      	mov	r2, r3
 8001612:	2301      	movs	r3, #1
 8001614:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001616:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 fec3 	bl	80023a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00c      	beq.n	8001642 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	015a      	lsls	r2, r3, #5
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	4413      	add	r3, r2
 8001630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001634:	461a      	mov	r2, r3
 8001636:	2308      	movs	r3, #8
 8001638:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800163a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 ff99 	bl	8002574 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	f003 0310 	and.w	r3, r3, #16
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	015a      	lsls	r2, r3, #5
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	4413      	add	r3, r2
 8001654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001658:	461a      	mov	r2, r3
 800165a:	2310      	movs	r3, #16
 800165c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d030      	beq.n	80016ca <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001670:	2b80      	cmp	r3, #128	; 0x80
 8001672:	d109      	bne.n	8001688 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	69fa      	ldr	r2, [r7, #28]
 800167e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001686:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800168a:	4613      	mov	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4413      	add	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	3304      	adds	r3, #4
 800169c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	78db      	ldrb	r3, [r3, #3]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d108      	bne.n	80016b8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2200      	movs	r2, #0
 80016aa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4619      	mov	r1, r3
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f005 faf8 	bl	8006ca8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	015a      	lsls	r2, r3, #5
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	4413      	add	r3, r2
 80016c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016c4:	461a      	mov	r2, r3
 80016c6:	2302      	movs	r3, #2
 80016c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	f003 0320 	and.w	r3, r3, #32
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d008      	beq.n	80016e6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e0:	461a      	mov	r2, r3
 80016e2:	2320      	movs	r3, #32
 80016e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d009      	beq.n	8001704 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	015a      	lsls	r2, r3, #5
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016fc:	461a      	mov	r2, r3
 80016fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001702:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	3301      	adds	r3, #1
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800170a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170c:	085b      	lsrs	r3, r3, #1
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001712:	2b00      	cmp	r3, #0
 8001714:	f47f af62 	bne.w	80015dc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f002 ff0f 	bl	8004540 <USB_ReadInterrupts>
 8001722:	4603      	mov	r3, r0
 8001724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001728:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800172c:	f040 80db 	bne.w	80018e6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f002 ff30 	bl	800459a <USB_ReadDevAllInEpInterrupt>
 800173a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001740:	e0cd      	b.n	80018de <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80c2 	beq.w	80018d2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f002 ff56 	bl	800460a <USB_ReadDevInEPInterrupt>
 800175e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d057      	beq.n	800181a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	f003 030f 	and.w	r3, r3, #15
 8001770:	2201      	movs	r2, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800177e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	43db      	mvns	r3, r3
 8001784:	69f9      	ldr	r1, [r7, #28]
 8001786:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800178a:	4013      	ands	r3, r2
 800178c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	015a      	lsls	r2, r3, #5
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800179a:	461a      	mov	r2, r3
 800179c:	2301      	movs	r3, #1
 800179e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d132      	bne.n	800180e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ac:	4613      	mov	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	334c      	adds	r3, #76	; 0x4c
 80017b8:	6819      	ldr	r1, [r3, #0]
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017be:	4613      	mov	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4403      	add	r3, r0
 80017c8:	3348      	adds	r3, #72	; 0x48
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4419      	add	r1, r3
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d2:	4613      	mov	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4403      	add	r3, r0
 80017dc:	334c      	adds	r3, #76	; 0x4c
 80017de:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d113      	bne.n	800180e <HAL_PCD_IRQHandler+0x3a2>
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ea:	4613      	mov	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	3354      	adds	r3, #84	; 0x54
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d108      	bne.n	800180e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001806:	461a      	mov	r2, r3
 8001808:	2101      	movs	r1, #1
 800180a:	f002 ff5d 	bl	80046c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	b2db      	uxtb	r3, r3
 8001812:	4619      	mov	r1, r3
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f005 f9cc 	bl	8006bb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d008      	beq.n	8001836 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	015a      	lsls	r2, r3, #5
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	4413      	add	r3, r2
 800182c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001830:	461a      	mov	r2, r3
 8001832:	2308      	movs	r3, #8
 8001834:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	015a      	lsls	r2, r3, #5
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	4413      	add	r3, r2
 8001848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800184c:	461a      	mov	r2, r3
 800184e:	2310      	movs	r3, #16
 8001850:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001858:	2b00      	cmp	r3, #0
 800185a:	d008      	beq.n	800186e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	015a      	lsls	r2, r3, #5
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	4413      	add	r3, r2
 8001864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001868:	461a      	mov	r2, r3
 800186a:	2340      	movs	r3, #64	; 0x40
 800186c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d023      	beq.n	80018c0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800187a:	6a38      	ldr	r0, [r7, #32]
 800187c:	f001 fe3e 	bl	80034fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001882:	4613      	mov	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	3338      	adds	r3, #56	; 0x38
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	4413      	add	r3, r2
 8001890:	3304      	adds	r3, #4
 8001892:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	78db      	ldrb	r3, [r3, #3]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d108      	bne.n	80018ae <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	2200      	movs	r2, #0
 80018a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	4619      	mov	r1, r3
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f005 fa0f 	bl	8006ccc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	015a      	lsls	r2, r3, #5
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ba:	461a      	mov	r2, r3
 80018bc:	2302      	movs	r3, #2
 80018be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80018ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 fcdb 	bl	8002288 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	3301      	adds	r3, #1
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018da:	085b      	lsrs	r3, r3, #1
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f47f af2e 	bne.w	8001742 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f002 fe28 	bl	8004540 <USB_ReadInterrupts>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018fa:	d122      	bne.n	8001942 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001916:	2b01      	cmp	r3, #1
 8001918:	d108      	bne.n	800192c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001922:	2100      	movs	r1, #0
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 fec3 	bl	80026b0 <HAL_PCDEx_LPM_Callback>
 800192a:	e002      	b.n	8001932 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f005 f9ad 	bl	8006c8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695a      	ldr	r2, [r3, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001940:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f002 fdfa 	bl	8004540 <USB_ReadInterrupts>
 800194c:	4603      	mov	r3, r0
 800194e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001956:	d112      	bne.n	800197e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b01      	cmp	r3, #1
 8001966:	d102      	bne.n	800196e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f005 f969 	bl	8006c40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695a      	ldr	r2, [r3, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800197c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f002 fddc 	bl	8004540 <USB_ReadInterrupts>
 8001988:	4603      	mov	r3, r0
 800198a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800198e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001992:	f040 80b7 	bne.w	8001b04 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2110      	movs	r1, #16
 80019b0:	4618      	mov	r0, r3
 80019b2:	f001 fda3 	bl	80034fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ba:	e046      	b.n	8001a4a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80019bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019be:	015a      	lsls	r2, r3, #5
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	4413      	add	r3, r2
 80019c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019c8:	461a      	mov	r2, r3
 80019ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019ce:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80019d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d2:	015a      	lsls	r2, r3, #5
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	4413      	add	r3, r2
 80019d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e0:	0151      	lsls	r1, r2, #5
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	440a      	add	r2, r1
 80019e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f2:	015a      	lsls	r2, r3, #5
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	4413      	add	r3, r2
 80019f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019fc:	461a      	mov	r2, r3
 80019fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a02:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a06:	015a      	lsls	r2, r3, #5
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a14:	0151      	lsls	r1, r2, #5
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	440a      	add	r2, r1
 8001a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a26:	015a      	lsls	r2, r3, #5
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a34:	0151      	lsls	r1, r2, #5
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	440a      	add	r2, r1
 8001a3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a42:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a46:	3301      	adds	r3, #1
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d3b3      	bcc.n	80019bc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a62:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a66:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d016      	beq.n	8001a9e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a80:	f043 030b 	orr.w	r3, r3, #11
 8001a84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a96:	f043 030b 	orr.w	r3, r3, #11
 8001a9a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9c:	e015      	b.n	8001aca <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ab0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ab4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ac4:	f043 030b 	orr.w	r3, r3, #11
 8001ac8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ad8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001adc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001aee:	461a      	mov	r2, r3
 8001af0:	f002 fdea 	bl	80046c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	695a      	ldr	r2, [r3, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f002 fd19 	bl	8004540 <USB_ReadInterrupts>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b18:	d124      	bne.n	8001b64 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f002 fdaf 	bl	8004682 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f001 fd64 	bl	80035f6 <USB_GetDevSpeed>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681c      	ldr	r4, [r3, #0]
 8001b3a:	f001 f9e9 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8001b3e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	4620      	mov	r0, r4
 8001b4a:	f001 fa63 	bl	8003014 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f005 f857 	bl	8006c02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b62:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f002 fce9 	bl	8004540 <USB_ReadInterrupts>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d10a      	bne.n	8001b8e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f005 f834 	bl	8006be6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695a      	ldr	r2, [r3, #20]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f002 0208 	and.w	r2, r2, #8
 8001b8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f002 fcd4 	bl	8004540 <USB_ReadInterrupts>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9e:	2b80      	cmp	r3, #128	; 0x80
 8001ba0:	d122      	bne.n	8001be8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bae:	2301      	movs	r3, #1
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb2:	e014      	b.n	8001bde <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d105      	bne.n	8001bd8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 fb27 	bl	8002226 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	3301      	adds	r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d3e5      	bcc.n	8001bb4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f002 fca7 	bl	8004540 <USB_ReadInterrupts>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bfc:	d13b      	bne.n	8001c76 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bfe:	2301      	movs	r3, #1
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
 8001c02:	e02b      	b.n	8001c5c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	015a      	lsls	r2, r3, #5
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	3340      	adds	r3, #64	; 0x40
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d115      	bne.n	8001c56 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001c2a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	da12      	bge.n	8001c56 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	333f      	adds	r3, #63	; 0x3f
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	4619      	mov	r1, r3
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 fae8 	bl	8002226 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	3301      	adds	r3, #1
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d3ce      	bcc.n	8001c04 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	695a      	ldr	r2, [r3, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f002 fc60 	bl	8004540 <USB_ReadInterrupts>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c8a:	d155      	bne.n	8001d38 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c90:	e045      	b.n	8001d1e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	015a      	lsls	r2, r3, #5
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d12e      	bne.n	8001d18 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001cba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	da2b      	bge.n	8001d18 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ccc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d121      	bne.n	8001d18 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10a      	bne.n	8001d18 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d14:	6053      	str	r3, [r2, #4]
            break;
 8001d16:	e007      	b.n	8001d28 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d3b4      	bcc.n	8001c92 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695a      	ldr	r2, [r3, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001d36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f002 fbff 	bl	8004540 <USB_ReadInterrupts>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d4c:	d10a      	bne.n	8001d64 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f004 ffce 	bl	8006cf0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 fbe9 	bl	8004540 <USB_ReadInterrupts>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d115      	bne.n	8001da4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f004 ffbe 	bl	8006d0c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6859      	ldr	r1, [r3, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	e000      	b.n	8001da4 <HAL_PCD_IRQHandler+0x938>
      return;
 8001da2:	bf00      	nop
    }
  }
}
 8001da4:	3734      	adds	r7, #52	; 0x34
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd90      	pop	{r4, r7, pc}

08001daa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_PCD_SetAddress+0x1a>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e013      	b.n	8001dec <HAL_PCD_SetAddress+0x42>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	78fa      	ldrb	r2, [r7, #3]
 8001dd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f002 fb47 	bl	8004470 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	4608      	mov	r0, r1
 8001dfe:	4611      	mov	r1, r2
 8001e00:	461a      	mov	r2, r3
 8001e02:	4603      	mov	r3, r0
 8001e04:	70fb      	strb	r3, [r7, #3]
 8001e06:	460b      	mov	r3, r1
 8001e08:	803b      	strh	r3, [r7, #0]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	da0f      	bge.n	8001e3a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e1a:	78fb      	ldrb	r3, [r7, #3]
 8001e1c:	f003 020f 	and.w	r2, r3, #15
 8001e20:	4613      	mov	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4413      	add	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	3338      	adds	r3, #56	; 0x38
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3304      	adds	r3, #4
 8001e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	705a      	strb	r2, [r3, #1]
 8001e38:	e00f      	b.n	8001e5a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	f003 020f 	and.w	r2, r3, #15
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	4413      	add	r3, r2
 8001e50:	3304      	adds	r3, #4
 8001e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e66:	883a      	ldrh	r2, [r7, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	78ba      	ldrb	r2, [r7, #2]
 8001e70:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	785b      	ldrb	r3, [r3, #1]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d004      	beq.n	8001e84 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e84:	78bb      	ldrb	r3, [r7, #2]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d102      	bne.n	8001e90 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <HAL_PCD_EP_Open+0xaa>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e00e      	b.n	8001ebc <HAL_PCD_EP_Open+0xc8>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68f9      	ldr	r1, [r7, #12]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f001 fbc7 	bl	8003640 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001eba:	7afb      	ldrb	r3, [r7, #11]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ed0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	da0f      	bge.n	8001ef8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	f003 020f 	and.w	r2, r3, #15
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	3338      	adds	r3, #56	; 0x38
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	3304      	adds	r3, #4
 8001eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	705a      	strb	r2, [r3, #1]
 8001ef6:	e00f      	b.n	8001f18 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	f003 020f 	and.w	r2, r3, #15
 8001efe:	4613      	mov	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4413      	add	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3304      	adds	r3, #4
 8001f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_PCD_EP_Close+0x6e>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e00e      	b.n	8001f50 <HAL_PCD_EP_Close+0x8c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68f9      	ldr	r1, [r7, #12]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f001 fc05 	bl	8003750 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	460b      	mov	r3, r1
 8001f66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f68:	7afb      	ldrb	r3, [r7, #11]
 8001f6a:	f003 020f 	and.w	r2, r3, #15
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3304      	adds	r3, #4
 8001f80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2200      	movs	r2, #0
 8001f92:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2200      	movs	r2, #0
 8001f98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f9a:	7afb      	ldrb	r3, [r7, #11]
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d102      	bne.n	8001fb4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fb4:	7afb      	ldrb	r3, [r7, #11]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d109      	bne.n	8001fd2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	6979      	ldr	r1, [r7, #20]
 8001fcc:	f001 fee4 	bl	8003d98 <USB_EP0StartXfer>
 8001fd0:	e008      	b.n	8001fe4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	461a      	mov	r2, r3
 8001fde:	6979      	ldr	r1, [r7, #20]
 8001fe0:	f001 fc92 	bl	8003908 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	f003 020f 	and.w	r2, r3, #15
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002010:	681b      	ldr	r3, [r3, #0]
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	603b      	str	r3, [r7, #0]
 800202a:	460b      	mov	r3, r1
 800202c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800202e:	7afb      	ldrb	r3, [r7, #11]
 8002030:	f003 020f 	and.w	r2, r3, #15
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	3338      	adds	r3, #56	; 0x38
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4413      	add	r3, r2
 8002042:	3304      	adds	r3, #4
 8002044:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2201      	movs	r2, #1
 800205c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800205e:	7afb      	ldrb	r3, [r7, #11]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	b2da      	uxtb	r2, r3
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d102      	bne.n	8002078 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002078:	7afb      	ldrb	r3, [r7, #11]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	2b00      	cmp	r3, #0
 8002080:	d109      	bne.n	8002096 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	6979      	ldr	r1, [r7, #20]
 8002090:	f001 fe82 	bl	8003d98 <USB_EP0StartXfer>
 8002094:	e008      	b.n	80020a8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	6979      	ldr	r1, [r7, #20]
 80020a4:	f001 fc30 	bl	8003908 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	f003 020f 	and.w	r2, r3, #15
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d901      	bls.n	80020d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e050      	b.n	8002172 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	da0f      	bge.n	80020f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	f003 020f 	and.w	r2, r3, #15
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	3338      	adds	r3, #56	; 0x38
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	3304      	adds	r3, #4
 80020ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2201      	movs	r2, #1
 80020f4:	705a      	strb	r2, [r3, #1]
 80020f6:	e00d      	b.n	8002114 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020f8:	78fa      	ldrb	r2, [r7, #3]
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	3304      	adds	r3, #4
 800210c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	b2da      	uxtb	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_PCD_EP_SetStall+0x82>
 8002130:	2302      	movs	r3, #2
 8002132:	e01e      	b.n	8002172 <HAL_PCD_EP_SetStall+0xc0>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68f9      	ldr	r1, [r7, #12]
 8002142:	4618      	mov	r0, r3
 8002144:	f002 f8c0 	bl	80042c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10a      	bne.n	8002168 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	b2d9      	uxtb	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002162:	461a      	mov	r2, r3
 8002164:	f002 fab0 	bl	80046c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b084      	sub	sp, #16
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	f003 020f 	and.w	r2, r3, #15
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	d901      	bls.n	8002198 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e042      	b.n	800221e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002198:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800219c:	2b00      	cmp	r3, #0
 800219e:	da0f      	bge.n	80021c0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	f003 020f 	and.w	r2, r3, #15
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	3338      	adds	r3, #56	; 0x38
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	4413      	add	r3, r2
 80021b4:	3304      	adds	r3, #4
 80021b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2201      	movs	r2, #1
 80021bc:	705a      	strb	r2, [r3, #1]
 80021be:	e00f      	b.n	80021e0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	f003 020f 	and.w	r2, r3, #15
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	3304      	adds	r3, #4
 80021d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_PCD_EP_ClrStall+0x86>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e00e      	b.n	800221e <HAL_PCD_EP_ClrStall+0xa4>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68f9      	ldr	r1, [r7, #12]
 800220e:	4618      	mov	r0, r3
 8002210:	f002 f8c8 	bl	80043a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002232:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002236:	2b00      	cmp	r3, #0
 8002238:	da0c      	bge.n	8002254 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	f003 020f 	and.w	r2, r3, #15
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	3338      	adds	r3, #56	; 0x38
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	3304      	adds	r3, #4
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	e00c      	b.n	800226e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	f003 020f 	and.w	r2, r3, #15
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	3304      	adds	r3, #4
 800226c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68f9      	ldr	r1, [r7, #12]
 8002274:	4618      	mov	r0, r3
 8002276:	f001 fee7 	bl	8004048 <USB_EPStopXfer>
 800227a:	4603      	mov	r3, r0
 800227c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800227e:	7afb      	ldrb	r3, [r7, #11]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	; 0x28
 800228c:	af02      	add	r7, sp, #8
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	4613      	mov	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	4413      	add	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	3338      	adds	r3, #56	; 0x38
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	3304      	adds	r3, #4
 80022ae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a1a      	ldr	r2, [r3, #32]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d901      	bls.n	80022c0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e06c      	b.n	800239a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	699a      	ldr	r2, [r3, #24]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d902      	bls.n	80022dc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	3303      	adds	r3, #3
 80022e0:	089b      	lsrs	r3, r3, #2
 80022e2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022e4:	e02b      	b.n	800233e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d902      	bls.n	8002302 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3303      	adds	r3, #3
 8002306:	089b      	lsrs	r3, r3, #2
 8002308:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6919      	ldr	r1, [r3, #16]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800231a:	b2db      	uxtb	r3, r3
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	4603      	mov	r3, r0
 8002320:	6978      	ldr	r0, [r7, #20]
 8002322:	f001 ff3b 	bl	800419c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	441a      	add	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a1a      	ldr	r2, [r3, #32]
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	441a      	add	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	429a      	cmp	r2, r3
 8002352:	d809      	bhi.n	8002368 <PCD_WriteEmptyTxFifo+0xe0>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a1a      	ldr	r2, [r3, #32]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800235c:	429a      	cmp	r2, r3
 800235e:	d203      	bcs.n	8002368 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1be      	bne.n	80022e6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	699a      	ldr	r2, [r3, #24]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	429a      	cmp	r2, r3
 8002372:	d811      	bhi.n	8002398 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	2201      	movs	r2, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	43db      	mvns	r3, r3
 800238e:	6939      	ldr	r1, [r7, #16]
 8002390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002394:	4013      	ands	r3, r2
 8002396:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3720      	adds	r7, #32
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	333c      	adds	r3, #60	; 0x3c
 80023bc:	3304      	adds	r3, #4
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d17b      	bne.n	80024d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d015      	beq.n	8002410 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	4a61      	ldr	r2, [pc, #388]	; (800256c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	f240 80b9 	bls.w	8002560 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80b3 	beq.w	8002560 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	015a      	lsls	r2, r3, #5
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	4413      	add	r3, r2
 8002402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002406:	461a      	mov	r2, r3
 8002408:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800240c:	6093      	str	r3, [r2, #8]
 800240e:	e0a7      	b.n	8002560 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	f003 0320 	and.w	r3, r3, #32
 8002416:	2b00      	cmp	r3, #0
 8002418:	d009      	beq.n	800242e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	4413      	add	r3, r2
 8002422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002426:	461a      	mov	r2, r3
 8002428:	2320      	movs	r3, #32
 800242a:	6093      	str	r3, [r2, #8]
 800242c:	e098      	b.n	8002560 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002434:	2b00      	cmp	r3, #0
 8002436:	f040 8093 	bne.w	8002560 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	4a4b      	ldr	r2, [pc, #300]	; (800256c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d90f      	bls.n	8002462 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	4413      	add	r3, r2
 8002454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002458:	461a      	mov	r2, r3
 800245a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800245e:	6093      	str	r3, [r2, #8]
 8002460:	e07e      	b.n	8002560 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	4413      	add	r3, r2
 8002474:	3304      	adds	r3, #4
 8002476:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	0159      	lsls	r1, r3, #5
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	440b      	add	r3, r1
 8002484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248e:	1ad2      	subs	r2, r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d114      	bne.n	80024c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024ac:	461a      	mov	r2, r3
 80024ae:	2101      	movs	r1, #1
 80024b0:	f002 f90a 	bl	80046c8 <USB_EP0_OutStart>
 80024b4:	e006      	b.n	80024c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	441a      	add	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	4619      	mov	r1, r3
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f004 fb56 	bl	8006b7c <HAL_PCD_DataOutStageCallback>
 80024d0:	e046      	b.n	8002560 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	4a26      	ldr	r2, [pc, #152]	; (8002570 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d124      	bne.n	8002524 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f0:	461a      	mov	r2, r3
 80024f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024f6:	6093      	str	r3, [r2, #8]
 80024f8:	e032      	b.n	8002560 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	4413      	add	r3, r2
 800250c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002510:	461a      	mov	r2, r3
 8002512:	2320      	movs	r3, #32
 8002514:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	4619      	mov	r1, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f004 fb2d 	bl	8006b7c <HAL_PCD_DataOutStageCallback>
 8002522:	e01d      	b.n	8002560 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d114      	bne.n	8002554 <PCD_EP_OutXfrComplete_int+0x1b0>
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d108      	bne.n	8002554 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800254c:	461a      	mov	r2, r3
 800254e:	2100      	movs	r1, #0
 8002550:	f002 f8ba 	bl	80046c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	4619      	mov	r1, r3
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f004 fb0e 	bl	8006b7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3720      	adds	r7, #32
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	4f54300a 	.word	0x4f54300a
 8002570:	4f54310a 	.word	0x4f54310a

08002574 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	333c      	adds	r3, #60	; 0x3c
 800258c:	3304      	adds	r3, #4
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4413      	add	r3, r2
 800259a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4a15      	ldr	r2, [pc, #84]	; (80025fc <PCD_EP_OutSetupPacket_int+0x88>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d90e      	bls.n	80025c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d009      	beq.n	80025c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c0:	461a      	mov	r2, r3
 80025c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f004 fac5 	bl	8006b58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <PCD_EP_OutSetupPacket_int+0x88>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d90c      	bls.n	80025f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d108      	bne.n	80025f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025e8:	461a      	mov	r2, r3
 80025ea:	2101      	movs	r1, #1
 80025ec:	f002 f86c 	bl	80046c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	4f54300a 	.word	0x4f54300a

08002600 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	70fb      	strb	r3, [r7, #3]
 800260c:	4613      	mov	r3, r2
 800260e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d107      	bne.n	800262e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800261e:	883b      	ldrh	r3, [r7, #0]
 8002620:	0419      	lsls	r1, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	430a      	orrs	r2, r1
 800262a:	629a      	str	r2, [r3, #40]	; 0x28
 800262c:	e028      	b.n	8002680 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	0c1b      	lsrs	r3, r3, #16
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	4413      	add	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800263c:	2300      	movs	r3, #0
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	e00d      	b.n	800265e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	3340      	adds	r3, #64	; 0x40
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	0c1b      	lsrs	r3, r3, #16
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	4413      	add	r3, r2
 8002656:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	3301      	adds	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	3b01      	subs	r3, #1
 8002664:	429a      	cmp	r2, r3
 8002666:	d3ec      	bcc.n	8002642 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002668:	883b      	ldrh	r3, [r7, #0]
 800266a:	0418      	lsls	r0, r3, #16
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6819      	ldr	r1, [r3, #0]
 8002670:	78fb      	ldrb	r3, [r7, #3]
 8002672:	3b01      	subs	r3, #1
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	4302      	orrs	r2, r0
 8002678:	3340      	adds	r3, #64	; 0x40
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e267      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d075      	beq.n	80027d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026e6:	4b88      	ldr	r3, [pc, #544]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d00c      	beq.n	800270c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026f2:	4b85      	ldr	r3, [pc, #532]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d112      	bne.n	8002724 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fe:	4b82      	ldr	r3, [pc, #520]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800270a:	d10b      	bne.n	8002724 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270c:	4b7e      	ldr	r3, [pc, #504]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d05b      	beq.n	80027d0 <HAL_RCC_OscConfig+0x108>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d157      	bne.n	80027d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e242      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272c:	d106      	bne.n	800273c <HAL_RCC_OscConfig+0x74>
 800272e:	4b76      	ldr	r3, [pc, #472]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a75      	ldr	r2, [pc, #468]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	e01d      	b.n	8002778 <HAL_RCC_OscConfig+0xb0>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x98>
 8002746:	4b70      	ldr	r3, [pc, #448]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a6f      	ldr	r2, [pc, #444]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800274c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b6d      	ldr	r3, [pc, #436]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a6c      	ldr	r2, [pc, #432]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e00b      	b.n	8002778 <HAL_RCC_OscConfig+0xb0>
 8002760:	4b69      	ldr	r3, [pc, #420]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a68      	ldr	r2, [pc, #416]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b66      	ldr	r3, [pc, #408]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a65      	ldr	r2, [pc, #404]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d013      	beq.n	80027a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7fe f8f6 	bl	8000970 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002788:	f7fe f8f2 	bl	8000970 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e207      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	4b5b      	ldr	r3, [pc, #364]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0xc0>
 80027a6:	e014      	b.n	80027d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7fe f8e2 	bl	8000970 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b0:	f7fe f8de 	bl	8000970 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e1f3      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c2:	4b51      	ldr	r3, [pc, #324]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0xe8>
 80027ce:	e000      	b.n	80027d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d063      	beq.n	80028a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027de:	4b4a      	ldr	r3, [pc, #296]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00b      	beq.n	8002802 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ea:	4b47      	ldr	r3, [pc, #284]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d11c      	bne.n	8002830 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f6:	4b44      	ldr	r3, [pc, #272]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d116      	bne.n	8002830 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002802:	4b41      	ldr	r3, [pc, #260]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_RCC_OscConfig+0x152>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d001      	beq.n	800281a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e1c7      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281a:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4937      	ldr	r1, [pc, #220]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282e:	e03a      	b.n	80028a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d020      	beq.n	800287a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002838:	4b34      	ldr	r3, [pc, #208]	; (800290c <HAL_RCC_OscConfig+0x244>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283e:	f7fe f897 	bl	8000970 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002846:	f7fe f893 	bl	8000970 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e1a8      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002858:	4b2b      	ldr	r3, [pc, #172]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002864:	4b28      	ldr	r3, [pc, #160]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4925      	ldr	r1, [pc, #148]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]
 8002878:	e015      	b.n	80028a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287a:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_RCC_OscConfig+0x244>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7fe f876 	bl	8000970 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002888:	f7fe f872 	bl	8000970 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e187      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d036      	beq.n	8002920 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d016      	beq.n	80028e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <HAL_RCC_OscConfig+0x248>)
 80028bc:	2201      	movs	r2, #1
 80028be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7fe f856 	bl	8000970 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c8:	f7fe f852 	bl	8000970 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e167      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028da:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80028dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x200>
 80028e6:	e01b      	b.n	8002920 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_RCC_OscConfig+0x248>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ee:	f7fe f83f 	bl	8000970 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	e00e      	b.n	8002914 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f6:	f7fe f83b 	bl	8000970 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d907      	bls.n	8002914 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e150      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
 8002908:	40023800 	.word	0x40023800
 800290c:	42470000 	.word	0x42470000
 8002910:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002914:	4b88      	ldr	r3, [pc, #544]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ea      	bne.n	80028f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 8097 	beq.w	8002a5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292e:	2300      	movs	r3, #0
 8002930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002932:	4b81      	ldr	r3, [pc, #516]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10f      	bne.n	800295e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	4b7d      	ldr	r3, [pc, #500]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	4a7c      	ldr	r2, [pc, #496]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
 800294e:	4b7a      	ldr	r3, [pc, #488]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295a:	2301      	movs	r3, #1
 800295c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295e:	4b77      	ldr	r3, [pc, #476]	; (8002b3c <HAL_RCC_OscConfig+0x474>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d118      	bne.n	800299c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800296a:	4b74      	ldr	r3, [pc, #464]	; (8002b3c <HAL_RCC_OscConfig+0x474>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a73      	ldr	r2, [pc, #460]	; (8002b3c <HAL_RCC_OscConfig+0x474>)
 8002970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002976:	f7fd fffb 	bl	8000970 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297e:	f7fd fff7 	bl	8000970 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e10c      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	4b6a      	ldr	r3, [pc, #424]	; (8002b3c <HAL_RCC_OscConfig+0x474>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x2ea>
 80029a4:	4b64      	ldr	r3, [pc, #400]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	4a63      	ldr	r2, [pc, #396]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6713      	str	r3, [r2, #112]	; 0x70
 80029b0:	e01c      	b.n	80029ec <HAL_RCC_OscConfig+0x324>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b05      	cmp	r3, #5
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCC_OscConfig+0x30c>
 80029ba:	4b5f      	ldr	r3, [pc, #380]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	4a5e      	ldr	r2, [pc, #376]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029c0:	f043 0304 	orr.w	r3, r3, #4
 80029c4:	6713      	str	r3, [r2, #112]	; 0x70
 80029c6:	4b5c      	ldr	r3, [pc, #368]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	4a5b      	ldr	r2, [pc, #364]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6713      	str	r3, [r2, #112]	; 0x70
 80029d2:	e00b      	b.n	80029ec <HAL_RCC_OscConfig+0x324>
 80029d4:	4b58      	ldr	r3, [pc, #352]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d8:	4a57      	ldr	r2, [pc, #348]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029da:	f023 0301 	bic.w	r3, r3, #1
 80029de:	6713      	str	r3, [r2, #112]	; 0x70
 80029e0:	4b55      	ldr	r3, [pc, #340]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	4a54      	ldr	r2, [pc, #336]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029e6:	f023 0304 	bic.w	r3, r3, #4
 80029ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d015      	beq.n	8002a20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f4:	f7fd ffbc 	bl	8000970 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029fc:	f7fd ffb8 	bl	8000970 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e0cb      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a12:	4b49      	ldr	r3, [pc, #292]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0ee      	beq.n	80029fc <HAL_RCC_OscConfig+0x334>
 8002a1e:	e014      	b.n	8002a4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a20:	f7fd ffa6 	bl	8000970 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a28:	f7fd ffa2 	bl	8000970 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e0b5      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3e:	4b3e      	ldr	r3, [pc, #248]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1ee      	bne.n	8002a28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d105      	bne.n	8002a5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a50:	4b39      	ldr	r3, [pc, #228]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	4a38      	ldr	r2, [pc, #224]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80a1 	beq.w	8002ba8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a66:	4b34      	ldr	r3, [pc, #208]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d05c      	beq.n	8002b2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d141      	bne.n	8002afe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7a:	4b31      	ldr	r3, [pc, #196]	; (8002b40 <HAL_RCC_OscConfig+0x478>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7fd ff76 	bl	8000970 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a88:	f7fd ff72 	bl	8000970 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e087      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9a:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69da      	ldr	r2, [r3, #28]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	019b      	lsls	r3, r3, #6
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	085b      	lsrs	r3, r3, #1
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	041b      	lsls	r3, r3, #16
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	061b      	lsls	r3, r3, #24
 8002aca:	491b      	ldr	r1, [pc, #108]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <HAL_RCC_OscConfig+0x478>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7fd ff4b 	bl	8000970 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ade:	f7fd ff47 	bl	8000970 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e05c      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x416>
 8002afc:	e054      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_RCC_OscConfig+0x478>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fd ff34 	bl	8000970 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fd ff30 	bl	8000970 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e045      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x444>
 8002b2a:	e03d      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d107      	bne.n	8002b44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e038      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCC_OscConfig+0x4ec>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d028      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d121      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d11a      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b74:	4013      	ands	r3, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d111      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800

08002bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0cc      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b68      	ldr	r3, [pc, #416]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d90c      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b65      	ldr	r3, [pc, #404]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b63      	ldr	r3, [pc, #396]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0b8      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d020      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c0c:	4b59      	ldr	r3, [pc, #356]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	4a58      	ldr	r2, [pc, #352]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c24:	4b53      	ldr	r3, [pc, #332]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a52      	ldr	r2, [pc, #328]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c30:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	494d      	ldr	r1, [pc, #308]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d044      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d119      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e07f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d003      	beq.n	8002c76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c76:	4b3f      	ldr	r3, [pc, #252]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e06f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c86:	4b3b      	ldr	r3, [pc, #236]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e067      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c96:	4b37      	ldr	r3, [pc, #220]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f023 0203 	bic.w	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4934      	ldr	r1, [pc, #208]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca8:	f7fd fe62 	bl	8000970 <HAL_GetTick>
 8002cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb0:	f7fd fe5e 	bl	8000970 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e04f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	4b2b      	ldr	r3, [pc, #172]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 020c 	and.w	r2, r3, #12
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d1eb      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b25      	ldr	r3, [pc, #148]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d20c      	bcs.n	8002d00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b22      	ldr	r3, [pc, #136]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e032      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d0c:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	4916      	ldr	r1, [pc, #88]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d009      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d2a:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	490e      	ldr	r1, [pc, #56]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d3e:	f000 f821 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 8002d42:	4602      	mov	r2, r0
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	490a      	ldr	r1, [pc, #40]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	5ccb      	ldrb	r3, [r1, r3]
 8002d52:	fa22 f303 	lsr.w	r3, r2, r3
 8002d56:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd fdc2 	bl	80008e8 <HAL_InitTick>

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40023c00 	.word	0x40023c00
 8002d74:	40023800 	.word	0x40023800
 8002d78:	0800717c 	.word	0x0800717c
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	20000004 	.word	0x20000004

08002d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d88:	b090      	sub	sp, #64	; 0x40
 8002d8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d90:	2300      	movs	r3, #0
 8002d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d94:	2300      	movs	r3, #0
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d9c:	4b59      	ldr	r3, [pc, #356]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d00d      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	f200 80a1 	bhi.w	8002ef0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0x34>
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d003      	beq.n	8002dbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002db6:	e09b      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db8:	4b53      	ldr	r3, [pc, #332]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002dbc:	e09b      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dbe:	4b53      	ldr	r3, [pc, #332]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002dc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dc2:	e098      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc4:	4b4f      	ldr	r3, [pc, #316]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dce:	4b4d      	ldr	r3, [pc, #308]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d028      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dda:	4b4a      	ldr	r3, [pc, #296]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	099b      	lsrs	r3, r3, #6
 8002de0:	2200      	movs	r2, #0
 8002de2:	623b      	str	r3, [r7, #32]
 8002de4:	627a      	str	r2, [r7, #36]	; 0x24
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002dec:	2100      	movs	r1, #0
 8002dee:	4b47      	ldr	r3, [pc, #284]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002df0:	fb03 f201 	mul.w	r2, r3, r1
 8002df4:	2300      	movs	r3, #0
 8002df6:	fb00 f303 	mul.w	r3, r0, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	4a43      	ldr	r2, [pc, #268]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002dfe:	fba0 1202 	umull	r1, r2, r0, r2
 8002e02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e04:	460a      	mov	r2, r1
 8002e06:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e0a:	4413      	add	r3, r2
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e10:	2200      	movs	r2, #0
 8002e12:	61bb      	str	r3, [r7, #24]
 8002e14:	61fa      	str	r2, [r7, #28]
 8002e16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e1e:	f7fd f9d9 	bl	80001d4 <__aeabi_uldivmod>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4613      	mov	r3, r2
 8002e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e2a:	e053      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2c:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	099b      	lsrs	r3, r3, #6
 8002e32:	2200      	movs	r2, #0
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	617a      	str	r2, [r7, #20]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e3e:	f04f 0b00 	mov.w	fp, #0
 8002e42:	4652      	mov	r2, sl
 8002e44:	465b      	mov	r3, fp
 8002e46:	f04f 0000 	mov.w	r0, #0
 8002e4a:	f04f 0100 	mov.w	r1, #0
 8002e4e:	0159      	lsls	r1, r3, #5
 8002e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e54:	0150      	lsls	r0, r2, #5
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	ebb2 080a 	subs.w	r8, r2, sl
 8002e5e:	eb63 090b 	sbc.w	r9, r3, fp
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e76:	ebb2 0408 	subs.w	r4, r2, r8
 8002e7a:	eb63 0509 	sbc.w	r5, r3, r9
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	00eb      	lsls	r3, r5, #3
 8002e88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e8c:	00e2      	lsls	r2, r4, #3
 8002e8e:	4614      	mov	r4, r2
 8002e90:	461d      	mov	r5, r3
 8002e92:	eb14 030a 	adds.w	r3, r4, sl
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	eb45 030b 	adc.w	r3, r5, fp
 8002e9c:	607b      	str	r3, [r7, #4]
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eaa:	4629      	mov	r1, r5
 8002eac:	028b      	lsls	r3, r1, #10
 8002eae:	4621      	mov	r1, r4
 8002eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eb4:	4621      	mov	r1, r4
 8002eb6:	028a      	lsls	r2, r1, #10
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	60fa      	str	r2, [r7, #12]
 8002ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ec8:	f7fd f984 	bl	80001d4 <__aeabi_uldivmod>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002eee:	e002      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ef2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3740      	adds	r7, #64	; 0x40
 8002efc:	46bd      	mov	sp, r7
 8002efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	00f42400 	.word	0x00f42400
 8002f0c:	017d7840 	.word	0x017d7840

08002f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f16:	681b      	ldr	r3, [r3, #0]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000000 	.word	0x20000000

08002f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f2c:	f7ff fff0 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8002f30:	4602      	mov	r2, r0
 8002f32:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	0a9b      	lsrs	r3, r3, #10
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	4903      	ldr	r1, [pc, #12]	; (8002f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f3e:	5ccb      	ldrb	r3, [r1, r3]
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	0800718c 	.word	0x0800718c

08002f50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f50:	b084      	sub	sp, #16
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	f107 001c 	add.w	r0, r7, #28
 8002f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d122      	bne.n	8002fae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d105      	bne.n	8002fa2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f001 fbee 	bl	8004784 <USB_CoreReset>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	73fb      	strb	r3, [r7, #15]
 8002fac:	e01a      	b.n	8002fe4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f001 fbe2 	bl	8004784 <USB_CoreReset>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38
 8002fd6:	e005      	b.n	8002fe4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d10b      	bne.n	8003002 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f043 0206 	orr.w	r2, r3, #6
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f043 0220 	orr.w	r2, r3, #32
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003002:	7bfb      	ldrb	r3, [r7, #15]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800300e:	b004      	add	sp, #16
 8003010:	4770      	bx	lr
	...

08003014 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	4613      	mov	r3, r2
 8003020:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d165      	bne.n	80030f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4a41      	ldr	r2, [pc, #260]	; (8003130 <USB_SetTurnaroundTime+0x11c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d906      	bls.n	800303e <USB_SetTurnaroundTime+0x2a>
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4a40      	ldr	r2, [pc, #256]	; (8003134 <USB_SetTurnaroundTime+0x120>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d202      	bcs.n	800303e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003038:	230f      	movs	r3, #15
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	e062      	b.n	8003104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4a3c      	ldr	r2, [pc, #240]	; (8003134 <USB_SetTurnaroundTime+0x120>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d306      	bcc.n	8003054 <USB_SetTurnaroundTime+0x40>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4a3b      	ldr	r2, [pc, #236]	; (8003138 <USB_SetTurnaroundTime+0x124>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d202      	bcs.n	8003054 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800304e:	230e      	movs	r3, #14
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	e057      	b.n	8003104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4a38      	ldr	r2, [pc, #224]	; (8003138 <USB_SetTurnaroundTime+0x124>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d306      	bcc.n	800306a <USB_SetTurnaroundTime+0x56>
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4a37      	ldr	r2, [pc, #220]	; (800313c <USB_SetTurnaroundTime+0x128>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d202      	bcs.n	800306a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003064:	230d      	movs	r3, #13
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	e04c      	b.n	8003104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	4a33      	ldr	r2, [pc, #204]	; (800313c <USB_SetTurnaroundTime+0x128>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d306      	bcc.n	8003080 <USB_SetTurnaroundTime+0x6c>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4a32      	ldr	r2, [pc, #200]	; (8003140 <USB_SetTurnaroundTime+0x12c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d802      	bhi.n	8003080 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800307a:	230c      	movs	r3, #12
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	e041      	b.n	8003104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4a2f      	ldr	r2, [pc, #188]	; (8003140 <USB_SetTurnaroundTime+0x12c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d906      	bls.n	8003096 <USB_SetTurnaroundTime+0x82>
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4a2e      	ldr	r2, [pc, #184]	; (8003144 <USB_SetTurnaroundTime+0x130>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d802      	bhi.n	8003096 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003090:	230b      	movs	r3, #11
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	e036      	b.n	8003104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	4a2a      	ldr	r2, [pc, #168]	; (8003144 <USB_SetTurnaroundTime+0x130>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d906      	bls.n	80030ac <USB_SetTurnaroundTime+0x98>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4a29      	ldr	r2, [pc, #164]	; (8003148 <USB_SetTurnaroundTime+0x134>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d802      	bhi.n	80030ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80030a6:	230a      	movs	r3, #10
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	e02b      	b.n	8003104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4a26      	ldr	r2, [pc, #152]	; (8003148 <USB_SetTurnaroundTime+0x134>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d906      	bls.n	80030c2 <USB_SetTurnaroundTime+0xae>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4a25      	ldr	r2, [pc, #148]	; (800314c <USB_SetTurnaroundTime+0x138>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d202      	bcs.n	80030c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80030bc:	2309      	movs	r3, #9
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	e020      	b.n	8003104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	4a21      	ldr	r2, [pc, #132]	; (800314c <USB_SetTurnaroundTime+0x138>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d306      	bcc.n	80030d8 <USB_SetTurnaroundTime+0xc4>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4a20      	ldr	r2, [pc, #128]	; (8003150 <USB_SetTurnaroundTime+0x13c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d802      	bhi.n	80030d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80030d2:	2308      	movs	r3, #8
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	e015      	b.n	8003104 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4a1d      	ldr	r2, [pc, #116]	; (8003150 <USB_SetTurnaroundTime+0x13c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d906      	bls.n	80030ee <USB_SetTurnaroundTime+0xda>
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4a1c      	ldr	r2, [pc, #112]	; (8003154 <USB_SetTurnaroundTime+0x140>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d202      	bcs.n	80030ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80030e8:	2307      	movs	r3, #7
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	e00a      	b.n	8003104 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80030ee:	2306      	movs	r3, #6
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	e007      	b.n	8003104 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80030fa:	2309      	movs	r3, #9
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	e001      	b.n	8003104 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003100:	2309      	movs	r3, #9
 8003102:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	029b      	lsls	r3, r3, #10
 8003118:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800311c:	431a      	orrs	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	00d8acbf 	.word	0x00d8acbf
 8003134:	00e4e1c0 	.word	0x00e4e1c0
 8003138:	00f42400 	.word	0x00f42400
 800313c:	01067380 	.word	0x01067380
 8003140:	011a499f 	.word	0x011a499f
 8003144:	01312cff 	.word	0x01312cff
 8003148:	014ca43f 	.word	0x014ca43f
 800314c:	016e3600 	.word	0x016e3600
 8003150:	01a6ab1f 	.word	0x01a6ab1f
 8003154:	01e84800 	.word	0x01e84800

08003158 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f043 0201 	orr.w	r2, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f023 0201 	bic.w	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d115      	bne.n	80031ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80031ca:	2001      	movs	r0, #1
 80031cc:	f7fd fbdc 	bl	8000988 <HAL_Delay>
      ms++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	3301      	adds	r3, #1
 80031d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f001 fa45 	bl	8004666 <USB_GetMode>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d01e      	beq.n	8003220 <USB_SetCurrentMode+0x84>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b31      	cmp	r3, #49	; 0x31
 80031e6:	d9f0      	bls.n	80031ca <USB_SetCurrentMode+0x2e>
 80031e8:	e01a      	b.n	8003220 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d115      	bne.n	800321c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80031fc:	2001      	movs	r0, #1
 80031fe:	f7fd fbc3 	bl	8000988 <HAL_Delay>
      ms++;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	3301      	adds	r3, #1
 8003206:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f001 fa2c 	bl	8004666 <USB_GetMode>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <USB_SetCurrentMode+0x84>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b31      	cmp	r3, #49	; 0x31
 8003218:	d9f0      	bls.n	80031fc <USB_SetCurrentMode+0x60>
 800321a:	e001      	b.n	8003220 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e005      	b.n	800322c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b32      	cmp	r3, #50	; 0x32
 8003224:	d101      	bne.n	800322a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003234:	b084      	sub	sp, #16
 8003236:	b580      	push	{r7, lr}
 8003238:	b086      	sub	sp, #24
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800324e:	2300      	movs	r3, #0
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	e009      	b.n	8003268 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	3340      	adds	r3, #64	; 0x40
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	2200      	movs	r2, #0
 8003260:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	3301      	adds	r3, #1
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b0e      	cmp	r3, #14
 800326c:	d9f2      	bls.n	8003254 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800326e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d11c      	bne.n	80032ae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003282:	f043 0302 	orr.w	r3, r3, #2
 8003286:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	639a      	str	r2, [r3, #56]	; 0x38
 80032ac:	e00b      	b.n	80032c6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80032cc:	461a      	mov	r2, r3
 80032ce:	2300      	movs	r3, #0
 80032d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d8:	4619      	mov	r1, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e0:	461a      	mov	r2, r3
 80032e2:	680b      	ldr	r3, [r1, #0]
 80032e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80032e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d10c      	bne.n	8003306 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80032ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d104      	bne.n	80032fc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80032f2:	2100      	movs	r1, #0
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f965 	bl	80035c4 <USB_SetDevSpeed>
 80032fa:	e008      	b.n	800330e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80032fc:	2101      	movs	r1, #1
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f960 	bl	80035c4 <USB_SetDevSpeed>
 8003304:	e003      	b.n	800330e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003306:	2103      	movs	r1, #3
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f95b 	bl	80035c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800330e:	2110      	movs	r1, #16
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f8f3 	bl	80034fc <USB_FlushTxFifo>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f91f 	bl	8003564 <USB_FlushRxFifo>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003336:	461a      	mov	r2, r3
 8003338:	2300      	movs	r3, #0
 800333a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003342:	461a      	mov	r2, r3
 8003344:	2300      	movs	r3, #0
 8003346:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334e:	461a      	mov	r2, r3
 8003350:	2300      	movs	r3, #0
 8003352:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003354:	2300      	movs	r3, #0
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	e043      	b.n	80033e2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800336c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003370:	d118      	bne.n	80033a4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10a      	bne.n	800338e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003384:	461a      	mov	r2, r3
 8003386:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	e013      	b.n	80033b6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800339a:	461a      	mov	r2, r3
 800339c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	e008      	b.n	80033b6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b0:	461a      	mov	r2, r3
 80033b2:	2300      	movs	r3, #0
 80033b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c2:	461a      	mov	r2, r3
 80033c4:	2300      	movs	r3, #0
 80033c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d4:	461a      	mov	r2, r3
 80033d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	3301      	adds	r3, #1
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d3b7      	bcc.n	800335a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	e043      	b.n	8003478 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003406:	d118      	bne.n	800343a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341a:	461a      	mov	r2, r3
 800341c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	e013      	b.n	800344c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003430:	461a      	mov	r2, r3
 8003432:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	e008      	b.n	800344c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003446:	461a      	mov	r2, r3
 8003448:	2300      	movs	r3, #0
 800344a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4413      	add	r3, r2
 8003454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003458:	461a      	mov	r2, r3
 800345a:	2300      	movs	r3, #0
 800345c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346a:	461a      	mov	r2, r3
 800346c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003470:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	3301      	adds	r3, #1
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	429a      	cmp	r2, r3
 800347e:	d3b7      	bcc.n	80033f0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800348e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003492:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80034a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80034a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d105      	bne.n	80034b4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	f043 0210 	orr.w	r2, r3, #16
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699a      	ldr	r2, [r3, #24]
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <USB_DevInit+0x2c4>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80034c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f043 0208 	orr.w	r2, r3, #8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80034d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d107      	bne.n	80034e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034e0:	f043 0304 	orr.w	r3, r3, #4
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034f4:	b004      	add	sp, #16
 80034f6:	4770      	bx	lr
 80034f8:	803c3800 	.word	0x803c3800

080034fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3301      	adds	r3, #1
 800350e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4a13      	ldr	r2, [pc, #76]	; (8003560 <USB_FlushTxFifo+0x64>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d901      	bls.n	800351c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e01b      	b.n	8003554 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	daf2      	bge.n	800350a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	019b      	lsls	r3, r3, #6
 800352c:	f043 0220 	orr.w	r2, r3, #32
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3301      	adds	r3, #1
 8003538:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4a08      	ldr	r2, [pc, #32]	; (8003560 <USB_FlushTxFifo+0x64>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e006      	b.n	8003554 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b20      	cmp	r3, #32
 8003550:	d0f0      	beq.n	8003534 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	00030d40 	.word	0x00030d40

08003564 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	3301      	adds	r3, #1
 8003574:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4a11      	ldr	r2, [pc, #68]	; (80035c0 <USB_FlushRxFifo+0x5c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e018      	b.n	80035b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	daf2      	bge.n	8003570 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2210      	movs	r2, #16
 8003592:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3301      	adds	r3, #1
 8003598:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4a08      	ldr	r2, [pc, #32]	; (80035c0 <USB_FlushRxFifo+0x5c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d901      	bls.n	80035a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e006      	b.n	80035b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0310 	and.w	r3, r3, #16
 80035ae:	2b10      	cmp	r3, #16
 80035b0:	d0f0      	beq.n	8003594 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	00030d40 	.word	0x00030d40

080035c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	68f9      	ldr	r1, [r7, #12]
 80035e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035e4:	4313      	orrs	r3, r2
 80035e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b087      	sub	sp, #28
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0306 	and.w	r3, r3, #6
 800360e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d102      	bne.n	800361c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003616:	2300      	movs	r3, #0
 8003618:	75fb      	strb	r3, [r7, #23]
 800361a:	e00a      	b.n	8003632 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d002      	beq.n	8003628 <USB_GetDevSpeed+0x32>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b06      	cmp	r3, #6
 8003626:	d102      	bne.n	800362e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003628:	2302      	movs	r3, #2
 800362a:	75fb      	strb	r3, [r7, #23]
 800362c:	e001      	b.n	8003632 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800362e:	230f      	movs	r3, #15
 8003630:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003632:	7dfb      	ldrb	r3, [r7, #23]
}
 8003634:	4618      	mov	r0, r3
 8003636:	371c      	adds	r7, #28
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	785b      	ldrb	r3, [r3, #1]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d13a      	bne.n	80036d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003662:	69da      	ldr	r2, [r3, #28]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	2101      	movs	r1, #1
 800366e:	fa01 f303 	lsl.w	r3, r1, r3
 8003672:	b29b      	uxth	r3, r3
 8003674:	68f9      	ldr	r1, [r7, #12]
 8003676:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800367a:	4313      	orrs	r3, r2
 800367c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d155      	bne.n	8003740 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	791b      	ldrb	r3, [r3, #4]
 80036ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80036b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	059b      	lsls	r3, r3, #22
 80036b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80036b8:	4313      	orrs	r3, r2
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	0151      	lsls	r1, r2, #5
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	440a      	add	r2, r1
 80036c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	e036      	b.n	8003740 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	2101      	movs	r1, #1
 80036e4:	fa01 f303 	lsl.w	r3, r1, r3
 80036e8:	041b      	lsls	r3, r3, #16
 80036ea:	68f9      	ldr	r1, [r7, #12]
 80036ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	015a      	lsls	r2, r3, #5
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d11a      	bne.n	8003740 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	791b      	ldrb	r3, [r3, #4]
 8003724:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003726:	430b      	orrs	r3, r1
 8003728:	4313      	orrs	r3, r2
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	0151      	lsls	r1, r2, #5
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	440a      	add	r2, r1
 8003732:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800373e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	785b      	ldrb	r3, [r3, #1]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d161      	bne.n	8003830 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800377e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003782:	d11f      	bne.n	80037c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	0151      	lsls	r1, r2, #5
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	440a      	add	r2, r1
 800379a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800379e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	0151      	lsls	r1, r2, #5
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	440a      	add	r2, r1
 80037ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	2101      	movs	r1, #1
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	b29b      	uxth	r3, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	68f9      	ldr	r1, [r7, #12]
 80037e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037e4:	4013      	ands	r3, r2
 80037e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	2101      	movs	r1, #1
 80037fa:	fa01 f303 	lsl.w	r3, r1, r3
 80037fe:	b29b      	uxth	r3, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	68f9      	ldr	r1, [r7, #12]
 8003804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003808:	4013      	ands	r3, r2
 800380a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	0159      	lsls	r1, r3, #5
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	440b      	add	r3, r1
 8003822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003826:	4619      	mov	r1, r3
 8003828:	4b35      	ldr	r3, [pc, #212]	; (8003900 <USB_DeactivateEndpoint+0x1b0>)
 800382a:	4013      	ands	r3, r2
 800382c:	600b      	str	r3, [r1, #0]
 800382e:	e060      	b.n	80038f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003846:	d11f      	bne.n	8003888 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	0151      	lsls	r1, r2, #5
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	440a      	add	r2, r1
 800385e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003862:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003866:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	0151      	lsls	r1, r2, #5
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	440a      	add	r2, r1
 800387e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003882:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003886:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	2101      	movs	r1, #1
 800389a:	fa01 f303 	lsl.w	r3, r1, r3
 800389e:	041b      	lsls	r3, r3, #16
 80038a0:	43db      	mvns	r3, r3
 80038a2:	68f9      	ldr	r1, [r7, #12]
 80038a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038a8:	4013      	ands	r3, r2
 80038aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b2:	69da      	ldr	r2, [r3, #28]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	2101      	movs	r1, #1
 80038be:	fa01 f303 	lsl.w	r3, r1, r3
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	43db      	mvns	r3, r3
 80038c6:	68f9      	ldr	r1, [r7, #12]
 80038c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038cc:	4013      	ands	r3, r2
 80038ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	0159      	lsls	r1, r3, #5
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	440b      	add	r3, r1
 80038e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ea:	4619      	mov	r1, r3
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <USB_DeactivateEndpoint+0x1b4>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	ec337800 	.word	0xec337800
 8003904:	eff37800 	.word	0xeff37800

08003908 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08a      	sub	sp, #40	; 0x28
 800390c:	af02      	add	r7, sp, #8
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	4613      	mov	r3, r2
 8003914:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	785b      	ldrb	r3, [r3, #1]
 8003924:	2b01      	cmp	r3, #1
 8003926:	f040 815c 	bne.w	8003be2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d132      	bne.n	8003998 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	0151      	lsls	r1, r2, #5
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	440a      	add	r2, r1
 8003948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800394c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003950:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003954:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	0151      	lsls	r1, r2, #5
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	440a      	add	r2, r1
 800396c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003970:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003974:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	4413      	add	r3, r2
 800397e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	0151      	lsls	r1, r2, #5
 8003988:	69fa      	ldr	r2, [r7, #28]
 800398a:	440a      	add	r2, r1
 800398c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003990:	0cdb      	lsrs	r3, r3, #19
 8003992:	04db      	lsls	r3, r3, #19
 8003994:	6113      	str	r3, [r2, #16]
 8003996:	e074      	b.n	8003a82 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	0151      	lsls	r1, r2, #5
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	440a      	add	r2, r1
 80039ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039b2:	0cdb      	lsrs	r3, r3, #19
 80039b4:	04db      	lsls	r3, r3, #19
 80039b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	0151      	lsls	r1, r2, #5
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	440a      	add	r2, r1
 80039ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	6999      	ldr	r1, [r3, #24]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	440b      	add	r3, r1
 80039f4:	1e59      	subs	r1, r3, #1
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80039fe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003a00:	4b9d      	ldr	r3, [pc, #628]	; (8003c78 <USB_EPStartXfer+0x370>)
 8003a02:	400b      	ands	r3, r1
 8003a04:	69b9      	ldr	r1, [r7, #24]
 8003a06:	0148      	lsls	r0, r1, #5
 8003a08:	69f9      	ldr	r1, [r7, #28]
 8003a0a:	4401      	add	r1, r0
 8003a0c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003a10:	4313      	orrs	r3, r2
 8003a12:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a20:	691a      	ldr	r2, [r3, #16]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a2a:	69b9      	ldr	r1, [r7, #24]
 8003a2c:	0148      	lsls	r0, r1, #5
 8003a2e:	69f9      	ldr	r1, [r7, #28]
 8003a30:	4401      	add	r1, r0
 8003a32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003a36:	4313      	orrs	r3, r2
 8003a38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	791b      	ldrb	r3, [r3, #4]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d11f      	bne.n	8003a82 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	0151      	lsls	r1, r2, #5
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	440a      	add	r2, r1
 8003a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003a60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	0151      	lsls	r1, r2, #5
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	440a      	add	r2, r1
 8003a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a80:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d14b      	bne.n	8003b20 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d009      	beq.n	8003aa4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	791b      	ldrb	r3, [r3, #4]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d128      	bne.n	8003afe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d110      	bne.n	8003ade <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	0151      	lsls	r1, r2, #5
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	440a      	add	r2, r1
 8003ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ad6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	e00f      	b.n	8003afe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	0151      	lsls	r1, r2, #5
 8003af0:	69fa      	ldr	r2, [r7, #28]
 8003af2:	440a      	add	r2, r1
 8003af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003afc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	0151      	lsls	r1, r2, #5
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	440a      	add	r2, r1
 8003b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e133      	b.n	8003d88 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	0151      	lsls	r1, r2, #5
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	440a      	add	r2, r1
 8003b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b3e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	791b      	ldrb	r3, [r3, #4]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d015      	beq.n	8003b74 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 811b 	beq.w	8003d88 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	2101      	movs	r1, #1
 8003b64:	fa01 f303 	lsl.w	r3, r1, r3
 8003b68:	69f9      	ldr	r1, [r7, #28]
 8003b6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	634b      	str	r3, [r1, #52]	; 0x34
 8003b72:	e109      	b.n	8003d88 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d110      	bne.n	8003ba6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	0151      	lsls	r1, r2, #5
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	440a      	add	r2, r1
 8003b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	e00f      	b.n	8003bc6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	0151      	lsls	r1, r2, #5
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	440a      	add	r2, r1
 8003bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	6919      	ldr	r1, [r3, #16]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	781a      	ldrb	r2, [r3, #0]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	b298      	uxth	r0, r3
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	4603      	mov	r3, r0
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 fade 	bl	800419c <USB_WritePacket>
 8003be0:	e0d2      	b.n	8003d88 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	0151      	lsls	r1, r2, #5
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	440a      	add	r2, r1
 8003bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bfc:	0cdb      	lsrs	r3, r3, #19
 8003bfe:	04db      	lsls	r3, r3, #19
 8003c00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	0151      	lsls	r1, r2, #5
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	440a      	add	r2, r1
 8003c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c24:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d126      	bne.n	8003c7c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c44:	69b9      	ldr	r1, [r7, #24]
 8003c46:	0148      	lsls	r0, r1, #5
 8003c48:	69f9      	ldr	r1, [r7, #28]
 8003c4a:	4401      	add	r1, r0
 8003c4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c50:	4313      	orrs	r3, r2
 8003c52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	0151      	lsls	r1, r2, #5
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	440a      	add	r2, r1
 8003c6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c72:	6113      	str	r3, [r2, #16]
 8003c74:	e03a      	b.n	8003cec <USB_EPStartXfer+0x3e4>
 8003c76:	bf00      	nop
 8003c78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	699a      	ldr	r2, [r3, #24]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	4413      	add	r3, r2
 8003c86:	1e5a      	subs	r2, r3, #1
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c90:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	8afa      	ldrh	r2, [r7, #22]
 8003c98:	fb03 f202 	mul.w	r2, r3, r2
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	8afb      	ldrh	r3, [r7, #22]
 8003cb0:	04d9      	lsls	r1, r3, #19
 8003cb2:	4b38      	ldr	r3, [pc, #224]	; (8003d94 <USB_EPStartXfer+0x48c>)
 8003cb4:	400b      	ands	r3, r1
 8003cb6:	69b9      	ldr	r1, [r7, #24]
 8003cb8:	0148      	lsls	r0, r1, #5
 8003cba:	69f9      	ldr	r1, [r7, #28]
 8003cbc:	4401      	add	r1, r0
 8003cbe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cdc:	69b9      	ldr	r1, [r7, #24]
 8003cde:	0148      	lsls	r0, r1, #5
 8003ce0:	69f9      	ldr	r1, [r7, #28]
 8003ce2:	4401      	add	r1, r0
 8003ce4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d10d      	bne.n	8003d0e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	6919      	ldr	r1, [r3, #16]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0a:	460a      	mov	r2, r1
 8003d0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	791b      	ldrb	r3, [r3, #4]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d128      	bne.n	8003d68 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d110      	bne.n	8003d48 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	0151      	lsls	r1, r2, #5
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	440a      	add	r2, r1
 8003d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	e00f      	b.n	8003d68 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	0151      	lsls	r1, r2, #5
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	440a      	add	r2, r1
 8003d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	0151      	lsls	r1, r2, #5
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	440a      	add	r2, r1
 8003d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	1ff80000 	.word	0x1ff80000

08003d98 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	4613      	mov	r3, r2
 8003da4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	785b      	ldrb	r3, [r3, #1]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	f040 80ce 	bne.w	8003f56 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d132      	bne.n	8003e28 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	0151      	lsls	r1, r2, #5
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	440a      	add	r2, r1
 8003dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ddc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003de0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003de4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	0151      	lsls	r1, r2, #5
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	440a      	add	r2, r1
 8003dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	0151      	lsls	r1, r2, #5
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	440a      	add	r2, r1
 8003e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e20:	0cdb      	lsrs	r3, r3, #19
 8003e22:	04db      	lsls	r3, r3, #19
 8003e24:	6113      	str	r3, [r2, #16]
 8003e26:	e04e      	b.n	8003ec6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	0151      	lsls	r1, r2, #5
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	440a      	add	r2, r1
 8003e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e42:	0cdb      	lsrs	r3, r3, #19
 8003e44:	04db      	lsls	r3, r3, #19
 8003e46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	0151      	lsls	r1, r2, #5
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e6a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	699a      	ldr	r2, [r3, #24]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d903      	bls.n	8003e80 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	0151      	lsls	r1, r2, #5
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	440a      	add	r2, r1
 8003e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb6:	6939      	ldr	r1, [r7, #16]
 8003eb8:	0148      	lsls	r0, r1, #5
 8003eba:	6979      	ldr	r1, [r7, #20]
 8003ebc:	4401      	add	r1, r0
 8003ebe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d11e      	bne.n	8003f0a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d009      	beq.n	8003ee8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	0151      	lsls	r1, r2, #5
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	440a      	add	r2, r1
 8003efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	e097      	b.n	800403a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	0151      	lsls	r1, r2, #5
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	440a      	add	r2, r1
 8003f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f28:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 8083 	beq.w	800403a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	f003 030f 	and.w	r3, r3, #15
 8003f44:	2101      	movs	r1, #1
 8003f46:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4a:	6979      	ldr	r1, [r7, #20]
 8003f4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f50:	4313      	orrs	r3, r2
 8003f52:	634b      	str	r3, [r1, #52]	; 0x34
 8003f54:	e071      	b.n	800403a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	0151      	lsls	r1, r2, #5
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	440a      	add	r2, r1
 8003f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f70:	0cdb      	lsrs	r3, r3, #19
 8003f72:	04db      	lsls	r3, r3, #19
 8003f74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	0151      	lsls	r1, r2, #5
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	440a      	add	r2, r1
 8003f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f98:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	0151      	lsls	r1, r2, #5
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	440a      	add	r2, r1
 8003fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe8:	6939      	ldr	r1, [r7, #16]
 8003fea:	0148      	lsls	r0, r1, #5
 8003fec:	6979      	ldr	r1, [r7, #20]
 8003fee:	4401      	add	r1, r0
 8003ff0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d10d      	bne.n	800401a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d009      	beq.n	800401a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	6919      	ldr	r1, [r3, #16]
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004016:	460a      	mov	r2, r1
 8004018:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	4413      	add	r3, r2
 8004022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	0151      	lsls	r1, r2, #5
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	440a      	add	r2, r1
 8004030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004034:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004038:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	785b      	ldrb	r3, [r3, #1]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d14a      	bne.n	80040fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800407a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800407e:	f040 8086 	bne.w	800418e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	7812      	ldrb	r2, [r2, #0]
 8004096:	0151      	lsls	r1, r2, #5
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	440a      	add	r2, r1
 800409c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	7812      	ldrb	r2, [r2, #0]
 80040ba:	0151      	lsls	r1, r2, #5
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	440a      	add	r2, r1
 80040c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3301      	adds	r3, #1
 80040ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d902      	bls.n	80040e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	75fb      	strb	r3, [r7, #23]
          break;
 80040de:	e056      	b.n	800418e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040f8:	d0e7      	beq.n	80040ca <USB_EPStopXfer+0x82>
 80040fa:	e048      	b.n	800418e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004110:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004114:	d13b      	bne.n	800418e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	7812      	ldrb	r2, [r2, #0]
 800412a:	0151      	lsls	r1, r2, #5
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	440a      	add	r2, r1
 8004130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004134:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004138:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	7812      	ldrb	r2, [r2, #0]
 800414e:	0151      	lsls	r1, r2, #5
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	440a      	add	r2, r1
 8004154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004158:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800415c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3301      	adds	r3, #1
 8004162:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f242 7210 	movw	r2, #10000	; 0x2710
 800416a:	4293      	cmp	r3, r2
 800416c:	d902      	bls.n	8004174 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	75fb      	strb	r3, [r7, #23]
          break;
 8004172:	e00c      	b.n	800418e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004188:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800418c:	d0e7      	beq.n	800415e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800418e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004190:	4618      	mov	r0, r3
 8004192:	371c      	adds	r7, #28
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800419c:	b480      	push	{r7}
 800419e:	b089      	sub	sp, #36	; 0x24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	4611      	mov	r1, r2
 80041a8:	461a      	mov	r2, r3
 80041aa:	460b      	mov	r3, r1
 80041ac:	71fb      	strb	r3, [r7, #7]
 80041ae:	4613      	mov	r3, r2
 80041b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80041ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d123      	bne.n	800420a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80041c2:	88bb      	ldrh	r3, [r7, #4]
 80041c4:	3303      	adds	r3, #3
 80041c6:	089b      	lsrs	r3, r3, #2
 80041c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80041ca:	2300      	movs	r3, #0
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	e018      	b.n	8004202 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	031a      	lsls	r2, r3, #12
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041dc:	461a      	mov	r2, r3
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	3301      	adds	r3, #1
 80041e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	3301      	adds	r3, #1
 80041ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	3301      	adds	r3, #1
 80041f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	3301      	adds	r3, #1
 80041fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	3301      	adds	r3, #1
 8004200:	61bb      	str	r3, [r7, #24]
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	429a      	cmp	r2, r3
 8004208:	d3e2      	bcc.n	80041d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3724      	adds	r7, #36	; 0x24
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004218:	b480      	push	{r7}
 800421a:	b08b      	sub	sp, #44	; 0x2c
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800422e:	88fb      	ldrh	r3, [r7, #6]
 8004230:	089b      	lsrs	r3, r3, #2
 8004232:	b29b      	uxth	r3, r3
 8004234:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800423e:	2300      	movs	r3, #0
 8004240:	623b      	str	r3, [r7, #32]
 8004242:	e014      	b.n	800426e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	3301      	adds	r3, #1
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	3301      	adds	r3, #1
 800425a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	3301      	adds	r3, #1
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	3301      	adds	r3, #1
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	3301      	adds	r3, #1
 800426c:	623b      	str	r3, [r7, #32]
 800426e:	6a3a      	ldr	r2, [r7, #32]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	429a      	cmp	r2, r3
 8004274:	d3e6      	bcc.n	8004244 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004276:	8bfb      	ldrh	r3, [r7, #30]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01e      	beq.n	80042ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004286:	461a      	mov	r2, r3
 8004288:	f107 0310 	add.w	r3, r7, #16
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
 800429c:	b2da      	uxtb	r2, r3
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	701a      	strb	r2, [r3, #0]
      i++;
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	3301      	adds	r3, #1
 80042a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	3301      	adds	r3, #1
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80042ae:	8bfb      	ldrh	r3, [r7, #30]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80042b4:	8bfb      	ldrh	r3, [r7, #30]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1ea      	bne.n	8004290 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042bc:	4618      	mov	r0, r3
 80042be:	372c      	adds	r7, #44	; 0x2c
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	785b      	ldrb	r3, [r3, #1]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d12c      	bne.n	800433e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	db12      	blt.n	800431c <USB_EPSetStall+0x54>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00f      	beq.n	800431c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	0151      	lsls	r1, r2, #5
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	440a      	add	r2, r1
 8004312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004316:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800431a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	0151      	lsls	r1, r2, #5
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	440a      	add	r2, r1
 8004332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004336:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	e02b      	b.n	8004396 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	db12      	blt.n	8004376 <USB_EPSetStall+0xae>
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00f      	beq.n	8004376 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	0151      	lsls	r1, r2, #5
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	440a      	add	r2, r1
 800436c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004370:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004374:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	440a      	add	r2, r1
 800438c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004390:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004394:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	785b      	ldrb	r3, [r3, #1]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d128      	bne.n	8004412 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	0151      	lsls	r1, r2, #5
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	440a      	add	r2, r1
 80043d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	791b      	ldrb	r3, [r3, #4]
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d003      	beq.n	80043f0 <USB_EPClearStall+0x4c>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	791b      	ldrb	r3, [r3, #4]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d138      	bne.n	8004462 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	0151      	lsls	r1, r2, #5
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	440a      	add	r2, r1
 8004406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800440a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	e027      	b.n	8004462 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	0151      	lsls	r1, r2, #5
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	440a      	add	r2, r1
 8004428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800442c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004430:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	791b      	ldrb	r3, [r3, #4]
 8004436:	2b03      	cmp	r3, #3
 8004438:	d003      	beq.n	8004442 <USB_EPClearStall+0x9e>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	791b      	ldrb	r3, [r3, #4]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d10f      	bne.n	8004462 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	0151      	lsls	r1, r2, #5
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	440a      	add	r2, r1
 8004458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800445c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004460:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800448e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004492:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80044a4:	68f9      	ldr	r1, [r7, #12]
 80044a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044aa:	4313      	orrs	r3, r2
 80044ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80044d6:	f023 0303 	bic.w	r3, r3, #3
 80044da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ea:	f023 0302 	bic.w	r3, r3, #2
 80044ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80044fe:	b480      	push	{r7}
 8004500:	b085      	sub	sp, #20
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004518:	f023 0303 	bic.w	r3, r3, #3
 800451c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800452c:	f043 0302 	orr.w	r3, r3, #2
 8004530:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4013      	ands	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004558:	68fb      	ldr	r3, [r7, #12]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004566:	b480      	push	{r7}
 8004568:	b085      	sub	sp, #20
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	4013      	ands	r3, r2
 8004588:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	0c1b      	lsrs	r3, r3, #16
}
 800458e:	4618      	mov	r0, r3
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800459a:	b480      	push	{r7}
 800459c:	b085      	sub	sp, #20
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	4013      	ands	r3, r2
 80045bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	b29b      	uxth	r3, r3
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b085      	sub	sp, #20
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	460b      	mov	r3, r1
 80045d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80045de:	78fb      	ldrb	r3, [r7, #3]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	4013      	ands	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80045fc:	68bb      	ldr	r3, [r7, #8]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800460a:	b480      	push	{r7}
 800460c:	b087      	sub	sp, #28
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	460b      	mov	r3, r1
 8004614:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800462e:	78fb      	ldrb	r3, [r7, #3]
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	fa22 f303 	lsr.w	r3, r2, r3
 800463a:	01db      	lsls	r3, r3, #7
 800463c:	b2db      	uxtb	r3, r3
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004644:	78fb      	ldrb	r3, [r7, #3]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4013      	ands	r3, r2
 8004656:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004658:	68bb      	ldr	r3, [r7, #8]
}
 800465a:	4618      	mov	r0, r3
 800465c:	371c      	adds	r7, #28
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f003 0301 	and.w	r3, r3, #1
}
 8004676:	4618      	mov	r0, r3
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004682:	b480      	push	{r7}
 8004684:	b085      	sub	sp, #20
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800469c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80046a0:	f023 0307 	bic.w	r3, r3, #7
 80046a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	460b      	mov	r3, r1
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	333c      	adds	r3, #60	; 0x3c
 80046de:	3304      	adds	r3, #4
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4a26      	ldr	r2, [pc, #152]	; (8004780 <USB_EP0_OutStart+0xb8>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d90a      	bls.n	8004702 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046fc:	d101      	bne.n	8004702 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	e037      	b.n	8004772 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004708:	461a      	mov	r2, r3
 800470a:	2300      	movs	r3, #0
 800470c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800471c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004720:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004730:	f043 0318 	orr.w	r3, r3, #24
 8004734:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004744:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004748:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800474a:	7afb      	ldrb	r3, [r7, #11]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d10f      	bne.n	8004770 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004756:	461a      	mov	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800476a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800476e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	4f54300a 	.word	0x4f54300a

08004784 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	3301      	adds	r3, #1
 8004794:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4a13      	ldr	r2, [pc, #76]	; (80047e8 <USB_CoreReset+0x64>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d901      	bls.n	80047a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e01b      	b.n	80047da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	daf2      	bge.n	8004790 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f043 0201 	orr.w	r2, r3, #1
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3301      	adds	r3, #1
 80047be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4a09      	ldr	r2, [pc, #36]	; (80047e8 <USB_CoreReset+0x64>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d901      	bls.n	80047cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e006      	b.n	80047da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d0f0      	beq.n	80047ba <USB_CoreReset+0x36>

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	00030d40 	.word	0x00030d40

080047ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80047f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80047fc:	f002 fc1e 	bl	800703c <USBD_static_malloc>
 8004800:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d109      	bne.n	800481c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	32b0      	adds	r2, #176	; 0xb0
 8004812:	2100      	movs	r1, #0
 8004814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004818:	2302      	movs	r3, #2
 800481a:	e0d4      	b.n	80049c6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800481c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004820:	2100      	movs	r1, #0
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f002 fc4e 	bl	80070c4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	32b0      	adds	r2, #176	; 0xb0
 8004832:	68f9      	ldr	r1, [r7, #12]
 8004834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	32b0      	adds	r2, #176	; 0xb0
 8004842:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	7c1b      	ldrb	r3, [r3, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d138      	bne.n	80048c6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004854:	4b5e      	ldr	r3, [pc, #376]	; (80049d0 <USBD_CDC_Init+0x1e4>)
 8004856:	7819      	ldrb	r1, [r3, #0]
 8004858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800485c:	2202      	movs	r2, #2
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f002 fac9 	bl	8006df6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004864:	4b5a      	ldr	r3, [pc, #360]	; (80049d0 <USBD_CDC_Init+0x1e4>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	f003 020f 	and.w	r2, r3, #15
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	440b      	add	r3, r1
 8004878:	3324      	adds	r3, #36	; 0x24
 800487a:	2201      	movs	r2, #1
 800487c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800487e:	4b55      	ldr	r3, [pc, #340]	; (80049d4 <USBD_CDC_Init+0x1e8>)
 8004880:	7819      	ldrb	r1, [r3, #0]
 8004882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004886:	2202      	movs	r2, #2
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f002 fab4 	bl	8006df6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800488e:	4b51      	ldr	r3, [pc, #324]	; (80049d4 <USBD_CDC_Init+0x1e8>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	f003 020f 	and.w	r2, r3, #15
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	4613      	mov	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80048a6:	2201      	movs	r2, #1
 80048a8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80048aa:	4b4b      	ldr	r3, [pc, #300]	; (80049d8 <USBD_CDC_Init+0x1ec>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	f003 020f 	and.w	r2, r3, #15
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	4613      	mov	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	3326      	adds	r3, #38	; 0x26
 80048c0:	2210      	movs	r2, #16
 80048c2:	801a      	strh	r2, [r3, #0]
 80048c4:	e035      	b.n	8004932 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80048c6:	4b42      	ldr	r3, [pc, #264]	; (80049d0 <USBD_CDC_Init+0x1e4>)
 80048c8:	7819      	ldrb	r1, [r3, #0]
 80048ca:	2340      	movs	r3, #64	; 0x40
 80048cc:	2202      	movs	r2, #2
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f002 fa91 	bl	8006df6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80048d4:	4b3e      	ldr	r3, [pc, #248]	; (80049d0 <USBD_CDC_Init+0x1e4>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	f003 020f 	and.w	r2, r3, #15
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	3324      	adds	r3, #36	; 0x24
 80048ea:	2201      	movs	r2, #1
 80048ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80048ee:	4b39      	ldr	r3, [pc, #228]	; (80049d4 <USBD_CDC_Init+0x1e8>)
 80048f0:	7819      	ldrb	r1, [r3, #0]
 80048f2:	2340      	movs	r3, #64	; 0x40
 80048f4:	2202      	movs	r2, #2
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f002 fa7d 	bl	8006df6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80048fc:	4b35      	ldr	r3, [pc, #212]	; (80049d4 <USBD_CDC_Init+0x1e8>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	f003 020f 	and.w	r2, r3, #15
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004914:	2201      	movs	r2, #1
 8004916:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004918:	4b2f      	ldr	r3, [pc, #188]	; (80049d8 <USBD_CDC_Init+0x1ec>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	f003 020f 	and.w	r2, r3, #15
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	3326      	adds	r3, #38	; 0x26
 800492e:	2210      	movs	r2, #16
 8004930:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004932:	4b29      	ldr	r3, [pc, #164]	; (80049d8 <USBD_CDC_Init+0x1ec>)
 8004934:	7819      	ldrb	r1, [r3, #0]
 8004936:	2308      	movs	r3, #8
 8004938:	2203      	movs	r2, #3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f002 fa5b 	bl	8006df6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004940:	4b25      	ldr	r3, [pc, #148]	; (80049d8 <USBD_CDC_Init+0x1ec>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	f003 020f 	and.w	r2, r3, #15
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	440b      	add	r3, r1
 8004954:	3324      	adds	r3, #36	; 0x24
 8004956:	2201      	movs	r2, #1
 8004958:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	33b0      	adds	r3, #176	; 0xb0
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004990:	2302      	movs	r3, #2
 8004992:	e018      	b.n	80049c6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	7c1b      	ldrb	r3, [r3, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10a      	bne.n	80049b2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800499c:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <USBD_CDC_Init+0x1e8>)
 800499e:	7819      	ldrb	r1, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80049a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f002 fb12 	bl	8006fd4 <USBD_LL_PrepareReceive>
 80049b0:	e008      	b.n	80049c4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80049b2:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <USBD_CDC_Init+0x1e8>)
 80049b4:	7819      	ldrb	r1, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80049bc:	2340      	movs	r3, #64	; 0x40
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f002 fb08 	bl	8006fd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20000093 	.word	0x20000093
 80049d4:	20000094 	.word	0x20000094
 80049d8:	20000095 	.word	0x20000095

080049dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80049e8:	4b3a      	ldr	r3, [pc, #232]	; (8004ad4 <USBD_CDC_DeInit+0xf8>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	4619      	mov	r1, r3
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f002 fa27 	bl	8006e42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80049f4:	4b37      	ldr	r3, [pc, #220]	; (8004ad4 <USBD_CDC_DeInit+0xf8>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	f003 020f 	and.w	r2, r3, #15
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	4613      	mov	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	440b      	add	r3, r1
 8004a08:	3324      	adds	r3, #36	; 0x24
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004a0e:	4b32      	ldr	r3, [pc, #200]	; (8004ad8 <USBD_CDC_DeInit+0xfc>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	4619      	mov	r1, r3
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f002 fa14 	bl	8006e42 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004a1a:	4b2f      	ldr	r3, [pc, #188]	; (8004ad8 <USBD_CDC_DeInit+0xfc>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	f003 020f 	and.w	r2, r3, #15
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004a32:	2200      	movs	r2, #0
 8004a34:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004a36:	4b29      	ldr	r3, [pc, #164]	; (8004adc <USBD_CDC_DeInit+0x100>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f002 fa00 	bl	8006e42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004a42:	4b26      	ldr	r3, [pc, #152]	; (8004adc <USBD_CDC_DeInit+0x100>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	f003 020f 	and.w	r2, r3, #15
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	440b      	add	r3, r1
 8004a56:	3324      	adds	r3, #36	; 0x24
 8004a58:	2200      	movs	r2, #0
 8004a5a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004a5c:	4b1f      	ldr	r3, [pc, #124]	; (8004adc <USBD_CDC_DeInit+0x100>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	f003 020f 	and.w	r2, r3, #15
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	3326      	adds	r3, #38	; 0x26
 8004a72:	2200      	movs	r2, #0
 8004a74:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	32b0      	adds	r2, #176	; 0xb0
 8004a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01f      	beq.n	8004ac8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	33b0      	adds	r3, #176	; 0xb0
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	32b0      	adds	r2, #176	; 0xb0
 8004aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f002 fad4 	bl	8007058 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	32b0      	adds	r2, #176	; 0xb0
 8004aba:	2100      	movs	r1, #0
 8004abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20000093 	.word	0x20000093
 8004ad8:	20000094 	.word	0x20000094
 8004adc:	20000095 	.word	0x20000095

08004ae0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	32b0      	adds	r2, #176	; 0xb0
 8004af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e0bf      	b.n	8004c90 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d050      	beq.n	8004bbe <USBD_CDC_Setup+0xde>
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	f040 80af 	bne.w	8004c80 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	88db      	ldrh	r3, [r3, #6]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d03a      	beq.n	8004ba0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	b25b      	sxtb	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	da1b      	bge.n	8004b6c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	33b0      	adds	r3, #176	; 0xb0
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004b4a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	88d2      	ldrh	r2, [r2, #6]
 8004b50:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	88db      	ldrh	r3, [r3, #6]
 8004b56:	2b07      	cmp	r3, #7
 8004b58:	bf28      	it	cs
 8004b5a:	2307      	movcs	r3, #7
 8004b5c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	89fa      	ldrh	r2, [r7, #14]
 8004b62:	4619      	mov	r1, r3
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f001 fd43 	bl	80065f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004b6a:	e090      	b.n	8004c8e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	785a      	ldrb	r2, [r3, #1]
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	88db      	ldrh	r3, [r3, #6]
 8004b7a:	2b3f      	cmp	r3, #63	; 0x3f
 8004b7c:	d803      	bhi.n	8004b86 <USBD_CDC_Setup+0xa6>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	88db      	ldrh	r3, [r3, #6]
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	e000      	b.n	8004b88 <USBD_CDC_Setup+0xa8>
 8004b86:	2240      	movs	r2, #64	; 0x40
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004b8e:	6939      	ldr	r1, [r7, #16]
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004b96:	461a      	mov	r2, r3
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f001 fd55 	bl	8006648 <USBD_CtlPrepareRx>
      break;
 8004b9e:	e076      	b.n	8004c8e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	33b0      	adds	r3, #176	; 0xb0
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	7850      	ldrb	r0, [r2, #1]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	6839      	ldr	r1, [r7, #0]
 8004bba:	4798      	blx	r3
      break;
 8004bbc:	e067      	b.n	8004c8e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	785b      	ldrb	r3, [r3, #1]
 8004bc2:	2b0b      	cmp	r3, #11
 8004bc4:	d851      	bhi.n	8004c6a <USBD_CDC_Setup+0x18a>
 8004bc6:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <USBD_CDC_Setup+0xec>)
 8004bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bcc:	08004bfd 	.word	0x08004bfd
 8004bd0:	08004c79 	.word	0x08004c79
 8004bd4:	08004c6b 	.word	0x08004c6b
 8004bd8:	08004c6b 	.word	0x08004c6b
 8004bdc:	08004c6b 	.word	0x08004c6b
 8004be0:	08004c6b 	.word	0x08004c6b
 8004be4:	08004c6b 	.word	0x08004c6b
 8004be8:	08004c6b 	.word	0x08004c6b
 8004bec:	08004c6b 	.word	0x08004c6b
 8004bf0:	08004c6b 	.word	0x08004c6b
 8004bf4:	08004c27 	.word	0x08004c27
 8004bf8:	08004c51 	.word	0x08004c51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d107      	bne.n	8004c18 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004c08:	f107 030a 	add.w	r3, r7, #10
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f001 fced 	bl	80065f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c16:	e032      	b.n	8004c7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004c18:	6839      	ldr	r1, [r7, #0]
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f001 fc77 	bl	800650e <USBD_CtlError>
            ret = USBD_FAIL;
 8004c20:	2303      	movs	r3, #3
 8004c22:	75fb      	strb	r3, [r7, #23]
          break;
 8004c24:	e02b      	b.n	8004c7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d107      	bne.n	8004c42 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004c32:	f107 030d 	add.w	r3, r7, #13
 8004c36:	2201      	movs	r2, #1
 8004c38:	4619      	mov	r1, r3
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f001 fcd8 	bl	80065f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c40:	e01d      	b.n	8004c7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004c42:	6839      	ldr	r1, [r7, #0]
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f001 fc62 	bl	800650e <USBD_CtlError>
            ret = USBD_FAIL;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	75fb      	strb	r3, [r7, #23]
          break;
 8004c4e:	e016      	b.n	8004c7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d00f      	beq.n	8004c7c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004c5c:	6839      	ldr	r1, [r7, #0]
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f001 fc55 	bl	800650e <USBD_CtlError>
            ret = USBD_FAIL;
 8004c64:	2303      	movs	r3, #3
 8004c66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004c68:	e008      	b.n	8004c7c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004c6a:	6839      	ldr	r1, [r7, #0]
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f001 fc4e 	bl	800650e <USBD_CtlError>
          ret = USBD_FAIL;
 8004c72:	2303      	movs	r3, #3
 8004c74:	75fb      	strb	r3, [r7, #23]
          break;
 8004c76:	e002      	b.n	8004c7e <USBD_CDC_Setup+0x19e>
          break;
 8004c78:	bf00      	nop
 8004c7a:	e008      	b.n	8004c8e <USBD_CDC_Setup+0x1ae>
          break;
 8004c7c:	bf00      	nop
      }
      break;
 8004c7e:	e006      	b.n	8004c8e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004c80:	6839      	ldr	r1, [r7, #0]
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f001 fc43 	bl	800650e <USBD_CtlError>
      ret = USBD_FAIL;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c8c:	bf00      	nop
  }

  return (uint8_t)ret;
 8004c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004caa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	32b0      	adds	r2, #176	; 0xb0
 8004cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e065      	b.n	8004d8e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	32b0      	adds	r2, #176	; 0xb0
 8004ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cd0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004cd2:	78fb      	ldrb	r3, [r7, #3]
 8004cd4:	f003 020f 	and.w	r2, r3, #15
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	3318      	adds	r3, #24
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d02f      	beq.n	8004d4c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	f003 020f 	and.w	r2, r3, #15
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	440b      	add	r3, r1
 8004cfe:	3318      	adds	r3, #24
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	78fb      	ldrb	r3, [r7, #3]
 8004d04:	f003 010f 	and.w	r1, r3, #15
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	440b      	add	r3, r1
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4403      	add	r3, r0
 8004d14:	3348      	adds	r3, #72	; 0x48
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
 8004d20:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d112      	bne.n	8004d4c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004d26:	78fb      	ldrb	r3, [r7, #3]
 8004d28:	f003 020f 	and.w	r2, r3, #15
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	3318      	adds	r3, #24
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004d3e:	78f9      	ldrb	r1, [r7, #3]
 8004d40:	2300      	movs	r3, #0
 8004d42:	2200      	movs	r2, #0
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f002 f924 	bl	8006f92 <USBD_LL_Transmit>
 8004d4a:	e01f      	b.n	8004d8c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	33b0      	adds	r3, #176	; 0xb0
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d010      	beq.n	8004d8c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	33b0      	adds	r3, #176	; 0xb0
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004d88:	78fa      	ldrb	r2, [r7, #3]
 8004d8a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	32b0      	adds	r2, #176	; 0xb0
 8004dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	32b0      	adds	r2, #176	; 0xb0
 8004dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e01a      	b.n	8004dfe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	4619      	mov	r1, r3
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f002 f922 	bl	8007016 <USBD_LL_GetRxDataSize>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	33b0      	adds	r3, #176	; 0xb0
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004df8:	4611      	mov	r1, r2
 8004dfa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	32b0      	adds	r2, #176	; 0xb0
 8004e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e025      	b.n	8004e74 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	33b0      	adds	r3, #176	; 0xb0
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01a      	beq.n	8004e72 <USBD_CDC_EP0_RxReady+0x6c>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004e42:	2bff      	cmp	r3, #255	; 0xff
 8004e44:	d015      	beq.n	8004e72 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	33b0      	adds	r3, #176	; 0xb0
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004e5e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004e66:	b292      	uxth	r2, r2
 8004e68:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	22ff      	movs	r2, #255	; 0xff
 8004e6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004e84:	2182      	movs	r1, #130	; 0x82
 8004e86:	4818      	ldr	r0, [pc, #96]	; (8004ee8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004e88:	f000 fd09 	bl	800589e <USBD_GetEpDesc>
 8004e8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004e8e:	2101      	movs	r1, #1
 8004e90:	4815      	ldr	r0, [pc, #84]	; (8004ee8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004e92:	f000 fd04 	bl	800589e <USBD_GetEpDesc>
 8004e96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004e98:	2181      	movs	r1, #129	; 0x81
 8004e9a:	4813      	ldr	r0, [pc, #76]	; (8004ee8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004e9c:	f000 fcff 	bl	800589e <USBD_GetEpDesc>
 8004ea0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2210      	movs	r2, #16
 8004eac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d006      	beq.n	8004ec2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ebc:	711a      	strb	r2, [r3, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d006      	beq.n	8004ed6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ed0:	711a      	strb	r2, [r3, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2243      	movs	r2, #67	; 0x43
 8004eda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004edc:	4b02      	ldr	r3, [pc, #8]	; (8004ee8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20000050 	.word	0x20000050

08004eec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004ef4:	2182      	movs	r1, #130	; 0x82
 8004ef6:	4818      	ldr	r0, [pc, #96]	; (8004f58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004ef8:	f000 fcd1 	bl	800589e <USBD_GetEpDesc>
 8004efc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004efe:	2101      	movs	r1, #1
 8004f00:	4815      	ldr	r0, [pc, #84]	; (8004f58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004f02:	f000 fccc 	bl	800589e <USBD_GetEpDesc>
 8004f06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004f08:	2181      	movs	r1, #129	; 0x81
 8004f0a:	4813      	ldr	r0, [pc, #76]	; (8004f58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004f0c:	f000 fcc7 	bl	800589e <USBD_GetEpDesc>
 8004f10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2210      	movs	r2, #16
 8004f1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d006      	beq.n	8004f32 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2200      	movs	r2, #0
 8004f28:	711a      	strb	r2, [r3, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f042 0202 	orr.w	r2, r2, #2
 8004f30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d006      	beq.n	8004f46 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	711a      	strb	r2, [r3, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f042 0202 	orr.w	r2, r2, #2
 8004f44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2243      	movs	r2, #67	; 0x43
 8004f4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004f4c:	4b02      	ldr	r3, [pc, #8]	; (8004f58 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20000050 	.word	0x20000050

08004f5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004f64:	2182      	movs	r1, #130	; 0x82
 8004f66:	4818      	ldr	r0, [pc, #96]	; (8004fc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004f68:	f000 fc99 	bl	800589e <USBD_GetEpDesc>
 8004f6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004f6e:	2101      	movs	r1, #1
 8004f70:	4815      	ldr	r0, [pc, #84]	; (8004fc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004f72:	f000 fc94 	bl	800589e <USBD_GetEpDesc>
 8004f76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004f78:	2181      	movs	r1, #129	; 0x81
 8004f7a:	4813      	ldr	r0, [pc, #76]	; (8004fc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004f7c:	f000 fc8f 	bl	800589e <USBD_GetEpDesc>
 8004f80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2210      	movs	r2, #16
 8004f8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d006      	beq.n	8004fa2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f9c:	711a      	strb	r2, [r3, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d006      	beq.n	8004fb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fb0:	711a      	strb	r2, [r3, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2243      	movs	r2, #67	; 0x43
 8004fba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004fbc:	4b02      	ldr	r3, [pc, #8]	; (8004fc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000050 	.word	0x20000050

08004fcc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	220a      	movs	r2, #10
 8004fd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004fda:	4b03      	ldr	r3, [pc, #12]	; (8004fe8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	2000000c 	.word	0x2000000c

08004fec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e009      	b.n	8005014 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	33b0      	adds	r3, #176	; 0xb0
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	32b0      	adds	r2, #176	; 0xb0
 8005036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800503a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005042:	2303      	movs	r3, #3
 8005044:	e008      	b.n	8005058 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	371c      	adds	r7, #28
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	32b0      	adds	r2, #176	; 0xb0
 8005078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800507c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005084:	2303      	movs	r3, #3
 8005086:	e004      	b.n	8005092 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
	...

080050a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	32b0      	adds	r2, #176	; 0xb0
 80050b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	32b0      	adds	r2, #176	; 0xb0
 80050c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e018      	b.n	8005100 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	7c1b      	ldrb	r3, [r3, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10a      	bne.n	80050ec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050d6:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <USBD_CDC_ReceivePacket+0x68>)
 80050d8:	7819      	ldrb	r1, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f001 ff75 	bl	8006fd4 <USBD_LL_PrepareReceive>
 80050ea:	e008      	b.n	80050fe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050ec:	4b06      	ldr	r3, [pc, #24]	; (8005108 <USBD_CDC_ReceivePacket+0x68>)
 80050ee:	7819      	ldrb	r1, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050f6:	2340      	movs	r3, #64	; 0x40
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f001 ff6b 	bl	8006fd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	20000094 	.word	0x20000094

0800510c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	4613      	mov	r3, r2
 8005118:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005120:	2303      	movs	r3, #3
 8005122:	e01f      	b.n	8005164 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	79fa      	ldrb	r2, [r7, #7]
 8005156:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f001 fde5 	bl	8006d28 <USBD_LL_Init>
 800515e:	4603      	mov	r3, r0
 8005160:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005162:	7dfb      	ldrb	r3, [r7, #23]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005180:	2303      	movs	r3, #3
 8005182:	e025      	b.n	80051d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	32ae      	adds	r2, #174	; 0xae
 8005196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00f      	beq.n	80051c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	32ae      	adds	r2, #174	; 0xae
 80051aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	f107 020e 	add.w	r2, r7, #14
 80051b4:	4610      	mov	r0, r2
 80051b6:	4798      	blx	r3
 80051b8:	4602      	mov	r2, r0
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f001 fded 	bl	8006dc0 <USBD_LL_Start>
 80051e6:	4603      	mov	r3, r0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80051f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	460b      	mov	r3, r1
 8005210:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800521c:	2b00      	cmp	r3, #0
 800521e:	d009      	beq.n	8005234 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	78fa      	ldrb	r2, [r7, #3]
 800522a:	4611      	mov	r1, r2
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	4798      	blx	r3
 8005230:	4603      	mov	r3, r0
 8005232:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005234:	7bfb      	ldrb	r3, [r7, #15]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	460b      	mov	r3, r1
 8005248:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	78fa      	ldrb	r2, [r7, #3]
 8005258:	4611      	mov	r1, r2
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	4798      	blx	r3
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005264:	2303      	movs	r3, #3
 8005266:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005268:	7bfb      	ldrb	r3, [r7, #15]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005282:	6839      	ldr	r1, [r7, #0]
 8005284:	4618      	mov	r0, r3
 8005286:	f001 f908 	bl	800649a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005298:	461a      	mov	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80052a6:	f003 031f 	and.w	r3, r3, #31
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d01a      	beq.n	80052e4 <USBD_LL_SetupStage+0x72>
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d822      	bhi.n	80052f8 <USBD_LL_SetupStage+0x86>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <USBD_LL_SetupStage+0x4a>
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d00a      	beq.n	80052d0 <USBD_LL_SetupStage+0x5e>
 80052ba:	e01d      	b.n	80052f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80052c2:	4619      	mov	r1, r3
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fb5f 	bl	8005988 <USBD_StdDevReq>
 80052ca:	4603      	mov	r3, r0
 80052cc:	73fb      	strb	r3, [r7, #15]
      break;
 80052ce:	e020      	b.n	8005312 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80052d6:	4619      	mov	r1, r3
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fbc7 	bl	8005a6c <USBD_StdItfReq>
 80052de:	4603      	mov	r3, r0
 80052e0:	73fb      	strb	r3, [r7, #15]
      break;
 80052e2:	e016      	b.n	8005312 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80052ea:	4619      	mov	r1, r3
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fc29 	bl	8005b44 <USBD_StdEPReq>
 80052f2:	4603      	mov	r3, r0
 80052f4:	73fb      	strb	r3, [r7, #15]
      break;
 80052f6:	e00c      	b.n	8005312 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80052fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005302:	b2db      	uxtb	r3, r3
 8005304:	4619      	mov	r1, r3
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f001 fdba 	bl	8006e80 <USBD_LL_StallEP>
 800530c:	4603      	mov	r3, r0
 800530e:	73fb      	strb	r3, [r7, #15]
      break;
 8005310:	bf00      	nop
  }

  return ret;
 8005312:	7bfb      	ldrb	r3, [r7, #15]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	460b      	mov	r3, r1
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800532e:	7afb      	ldrb	r3, [r7, #11]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d16e      	bne.n	8005412 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800533a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005342:	2b03      	cmp	r3, #3
 8005344:	f040 8098 	bne.w	8005478 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	429a      	cmp	r2, r3
 8005352:	d913      	bls.n	800537c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	1ad2      	subs	r2, r2, r3
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	4293      	cmp	r3, r2
 800536c:	bf28      	it	cs
 800536e:	4613      	movcs	r3, r2
 8005370:	461a      	mov	r2, r3
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f001 f984 	bl	8006682 <USBD_CtlContinueRx>
 800537a:	e07d      	b.n	8005478 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005382:	f003 031f 	and.w	r3, r3, #31
 8005386:	2b02      	cmp	r3, #2
 8005388:	d014      	beq.n	80053b4 <USBD_LL_DataOutStage+0x98>
 800538a:	2b02      	cmp	r3, #2
 800538c:	d81d      	bhi.n	80053ca <USBD_LL_DataOutStage+0xae>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <USBD_LL_DataOutStage+0x7c>
 8005392:	2b01      	cmp	r3, #1
 8005394:	d003      	beq.n	800539e <USBD_LL_DataOutStage+0x82>
 8005396:	e018      	b.n	80053ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	75bb      	strb	r3, [r7, #22]
            break;
 800539c:	e018      	b.n	80053d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	4619      	mov	r1, r3
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 fa5e 	bl	800586a <USBD_CoreFindIF>
 80053ae:	4603      	mov	r3, r0
 80053b0:	75bb      	strb	r3, [r7, #22]
            break;
 80053b2:	e00d      	b.n	80053d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	4619      	mov	r1, r3
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 fa60 	bl	8005884 <USBD_CoreFindEP>
 80053c4:	4603      	mov	r3, r0
 80053c6:	75bb      	strb	r3, [r7, #22]
            break;
 80053c8:	e002      	b.n	80053d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	75bb      	strb	r3, [r7, #22]
            break;
 80053ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80053d0:	7dbb      	ldrb	r3, [r7, #22]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d119      	bne.n	800540a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d113      	bne.n	800540a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80053e2:	7dba      	ldrb	r2, [r7, #22]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	32ae      	adds	r2, #174	; 0xae
 80053e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00b      	beq.n	800540a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80053f2:	7dba      	ldrb	r2, [r7, #22]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80053fa:	7dba      	ldrb	r2, [r7, #22]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	32ae      	adds	r2, #174	; 0xae
 8005400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f001 f94a 	bl	80066a4 <USBD_CtlSendStatus>
 8005410:	e032      	b.n	8005478 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005412:	7afb      	ldrb	r3, [r7, #11]
 8005414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005418:	b2db      	uxtb	r3, r3
 800541a:	4619      	mov	r1, r3
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 fa31 	bl	8005884 <USBD_CoreFindEP>
 8005422:	4603      	mov	r3, r0
 8005424:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005426:	7dbb      	ldrb	r3, [r7, #22]
 8005428:	2bff      	cmp	r3, #255	; 0xff
 800542a:	d025      	beq.n	8005478 <USBD_LL_DataOutStage+0x15c>
 800542c:	7dbb      	ldrb	r3, [r7, #22]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d122      	bne.n	8005478 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b03      	cmp	r3, #3
 800543c:	d117      	bne.n	800546e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800543e:	7dba      	ldrb	r2, [r7, #22]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	32ae      	adds	r2, #174	; 0xae
 8005444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00f      	beq.n	800546e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800544e:	7dba      	ldrb	r2, [r7, #22]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005456:	7dba      	ldrb	r2, [r7, #22]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	32ae      	adds	r2, #174	; 0xae
 800545c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	7afa      	ldrb	r2, [r7, #11]
 8005464:	4611      	mov	r1, r2
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	4798      	blx	r3
 800546a:	4603      	mov	r3, r0
 800546c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800546e:	7dfb      	ldrb	r3, [r7, #23]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005474:	7dfb      	ldrb	r3, [r7, #23]
 8005476:	e000      	b.n	800547a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b086      	sub	sp, #24
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	460b      	mov	r3, r1
 800548c:	607a      	str	r2, [r7, #4]
 800548e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005490:	7afb      	ldrb	r3, [r7, #11]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d16f      	bne.n	8005576 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	3314      	adds	r3, #20
 800549a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d15a      	bne.n	800555c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d914      	bls.n	80054dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	1ad2      	subs	r2, r2, r3
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	461a      	mov	r2, r3
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f001 f8ac 	bl	8006626 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054ce:	2300      	movs	r3, #0
 80054d0:	2200      	movs	r2, #0
 80054d2:	2100      	movs	r1, #0
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f001 fd7d 	bl	8006fd4 <USBD_LL_PrepareReceive>
 80054da:	e03f      	b.n	800555c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d11c      	bne.n	8005522 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d316      	bcc.n	8005522 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80054fe:	429a      	cmp	r2, r3
 8005500:	d20f      	bcs.n	8005522 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005502:	2200      	movs	r2, #0
 8005504:	2100      	movs	r1, #0
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f001 f88d 	bl	8006626 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005514:	2300      	movs	r3, #0
 8005516:	2200      	movs	r2, #0
 8005518:	2100      	movs	r1, #0
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f001 fd5a 	bl	8006fd4 <USBD_LL_PrepareReceive>
 8005520:	e01c      	b.n	800555c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b03      	cmp	r3, #3
 800552c:	d10f      	bne.n	800554e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800554e:	2180      	movs	r1, #128	; 0x80
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f001 fc95 	bl	8006e80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f001 f8b7 	bl	80066ca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d03a      	beq.n	80055dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f7ff fe42 	bl	80051f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005574:	e032      	b.n	80055dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005576:	7afb      	ldrb	r3, [r7, #11]
 8005578:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800557c:	b2db      	uxtb	r3, r3
 800557e:	4619      	mov	r1, r3
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f97f 	bl	8005884 <USBD_CoreFindEP>
 8005586:	4603      	mov	r3, r0
 8005588:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800558a:	7dfb      	ldrb	r3, [r7, #23]
 800558c:	2bff      	cmp	r3, #255	; 0xff
 800558e:	d025      	beq.n	80055dc <USBD_LL_DataInStage+0x15a>
 8005590:	7dfb      	ldrb	r3, [r7, #23]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d122      	bne.n	80055dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d11c      	bne.n	80055dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80055a2:	7dfa      	ldrb	r2, [r7, #23]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	32ae      	adds	r2, #174	; 0xae
 80055a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d014      	beq.n	80055dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80055b2:	7dfa      	ldrb	r2, [r7, #23]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80055ba:	7dfa      	ldrb	r2, [r7, #23]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	32ae      	adds	r2, #174	; 0xae
 80055c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	7afa      	ldrb	r2, [r7, #11]
 80055c8:	4611      	mov	r1, r2
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	4798      	blx	r3
 80055ce:	4603      	mov	r3, r0
 80055d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80055d2:	7dbb      	ldrb	r3, [r7, #22]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80055d8:	7dbb      	ldrb	r3, [r7, #22]
 80055da:	e000      	b.n	80055de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b084      	sub	sp, #16
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800561e:	2b00      	cmp	r3, #0
 8005620:	d014      	beq.n	800564c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00e      	beq.n	800564c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6852      	ldr	r2, [r2, #4]
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	4611      	mov	r1, r2
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	4798      	blx	r3
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005648:	2303      	movs	r3, #3
 800564a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800564c:	2340      	movs	r3, #64	; 0x40
 800564e:	2200      	movs	r2, #0
 8005650:	2100      	movs	r1, #0
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f001 fbcf 	bl	8006df6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2240      	movs	r2, #64	; 0x40
 8005664:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005668:	2340      	movs	r3, #64	; 0x40
 800566a:	2200      	movs	r2, #0
 800566c:	2180      	movs	r1, #128	; 0x80
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f001 fbc1 	bl	8006df6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2240      	movs	r2, #64	; 0x40
 800567e:	621a      	str	r2, [r3, #32]

  return ret;
 8005680:	7bfb      	ldrb	r3, [r7, #15]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	460b      	mov	r3, r1
 8005694:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	78fa      	ldrb	r2, [r7, #3]
 800569a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2204      	movs	r2, #4
 80056c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d106      	bne.n	80056f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b082      	sub	sp, #8
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b03      	cmp	r3, #3
 8005718:	d110      	bne.n	800573c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00b      	beq.n	800573c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	460b      	mov	r3, r1
 8005750:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	32ae      	adds	r2, #174	; 0xae
 800575c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005764:	2303      	movs	r3, #3
 8005766:	e01c      	b.n	80057a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b03      	cmp	r3, #3
 8005772:	d115      	bne.n	80057a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	32ae      	adds	r2, #174	; 0xae
 800577e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00b      	beq.n	80057a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	32ae      	adds	r2, #174	; 0xae
 8005792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	78fa      	ldrb	r2, [r7, #3]
 800579a:	4611      	mov	r1, r2
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b082      	sub	sp, #8
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	460b      	mov	r3, r1
 80057b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	32ae      	adds	r2, #174	; 0xae
 80057c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e01c      	b.n	8005806 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d115      	bne.n	8005804 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	32ae      	adds	r2, #174	; 0xae
 80057e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00b      	beq.n	8005804 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	32ae      	adds	r2, #174	; 0xae
 80057f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	78fa      	ldrb	r2, [r7, #3]
 80057fe:	4611      	mov	r1, r2
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800582c:	2300      	movs	r3, #0
 800582e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00e      	beq.n	8005860 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6852      	ldr	r2, [r2, #4]
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	4611      	mov	r1, r2
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	4798      	blx	r3
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800585c:	2303      	movs	r3, #3
 800585e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005860:	7bfb      	ldrb	r3, [r7, #15]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	460b      	mov	r3, r1
 8005874:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005876:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005878:	4618      	mov	r0, r3
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005890:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b086      	sub	sp, #24
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	460b      	mov	r3, r1
 80058a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80058b2:	2300      	movs	r3, #0
 80058b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	885b      	ldrh	r3, [r3, #2]
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d920      	bls.n	8005908 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80058ce:	e013      	b.n	80058f8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80058d0:	f107 030a 	add.w	r3, r7, #10
 80058d4:	4619      	mov	r1, r3
 80058d6:	6978      	ldr	r0, [r7, #20]
 80058d8:	f000 f81b 	bl	8005912 <USBD_GetNextDesc>
 80058dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	785b      	ldrb	r3, [r3, #1]
 80058e2:	2b05      	cmp	r3, #5
 80058e4:	d108      	bne.n	80058f8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	789b      	ldrb	r3, [r3, #2]
 80058ee:	78fa      	ldrb	r2, [r7, #3]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d008      	beq.n	8005906 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80058f4:	2300      	movs	r3, #0
 80058f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	885b      	ldrh	r3, [r3, #2]
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	897b      	ldrh	r3, [r7, #10]
 8005900:	429a      	cmp	r2, r3
 8005902:	d8e5      	bhi.n	80058d0 <USBD_GetEpDesc+0x32>
 8005904:	e000      	b.n	8005908 <USBD_GetEpDesc+0x6a>
          break;
 8005906:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005908:	693b      	ldr	r3, [r7, #16]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3718      	adds	r7, #24
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005912:	b480      	push	{r7}
 8005914:	b085      	sub	sp, #20
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	881a      	ldrh	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	b29b      	uxth	r3, r3
 800592a:	4413      	add	r3, r2
 800592c:	b29a      	uxth	r2, r3
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4413      	add	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800593e:	68fb      	ldr	r3, [r7, #12]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	3301      	adds	r3, #1
 8005962:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800596a:	8a3b      	ldrh	r3, [r7, #16]
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	b21a      	sxth	r2, r3
 8005970:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005974:	4313      	orrs	r3, r2
 8005976:	b21b      	sxth	r3, r3
 8005978:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800597a:	89fb      	ldrh	r3, [r7, #14]
}
 800597c:	4618      	mov	r0, r3
 800597e:	371c      	adds	r7, #28
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800599e:	2b40      	cmp	r3, #64	; 0x40
 80059a0:	d005      	beq.n	80059ae <USBD_StdDevReq+0x26>
 80059a2:	2b40      	cmp	r3, #64	; 0x40
 80059a4:	d857      	bhi.n	8005a56 <USBD_StdDevReq+0xce>
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00f      	beq.n	80059ca <USBD_StdDevReq+0x42>
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	d153      	bne.n	8005a56 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	32ae      	adds	r2, #174	; 0xae
 80059b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	4798      	blx	r3
 80059c4:	4603      	mov	r3, r0
 80059c6:	73fb      	strb	r3, [r7, #15]
      break;
 80059c8:	e04a      	b.n	8005a60 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	785b      	ldrb	r3, [r3, #1]
 80059ce:	2b09      	cmp	r3, #9
 80059d0:	d83b      	bhi.n	8005a4a <USBD_StdDevReq+0xc2>
 80059d2:	a201      	add	r2, pc, #4	; (adr r2, 80059d8 <USBD_StdDevReq+0x50>)
 80059d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d8:	08005a2d 	.word	0x08005a2d
 80059dc:	08005a41 	.word	0x08005a41
 80059e0:	08005a4b 	.word	0x08005a4b
 80059e4:	08005a37 	.word	0x08005a37
 80059e8:	08005a4b 	.word	0x08005a4b
 80059ec:	08005a0b 	.word	0x08005a0b
 80059f0:	08005a01 	.word	0x08005a01
 80059f4:	08005a4b 	.word	0x08005a4b
 80059f8:	08005a23 	.word	0x08005a23
 80059fc:	08005a15 	.word	0x08005a15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005a00:	6839      	ldr	r1, [r7, #0]
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fa3c 	bl	8005e80 <USBD_GetDescriptor>
          break;
 8005a08:	e024      	b.n	8005a54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fba1 	bl	8006154 <USBD_SetAddress>
          break;
 8005a12:	e01f      	b.n	8005a54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005a14:	6839      	ldr	r1, [r7, #0]
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fbe0 	bl	80061dc <USBD_SetConfig>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	73fb      	strb	r3, [r7, #15]
          break;
 8005a20:	e018      	b.n	8005a54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005a22:	6839      	ldr	r1, [r7, #0]
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fc83 	bl	8006330 <USBD_GetConfig>
          break;
 8005a2a:	e013      	b.n	8005a54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005a2c:	6839      	ldr	r1, [r7, #0]
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fcb4 	bl	800639c <USBD_GetStatus>
          break;
 8005a34:	e00e      	b.n	8005a54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005a36:	6839      	ldr	r1, [r7, #0]
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fce3 	bl	8006404 <USBD_SetFeature>
          break;
 8005a3e:	e009      	b.n	8005a54 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fd07 	bl	8006456 <USBD_ClrFeature>
          break;
 8005a48:	e004      	b.n	8005a54 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fd5e 	bl	800650e <USBD_CtlError>
          break;
 8005a52:	bf00      	nop
      }
      break;
 8005a54:	e004      	b.n	8005a60 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fd58 	bl	800650e <USBD_CtlError>
      break;
 8005a5e:	bf00      	nop
  }

  return ret;
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop

08005a6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a82:	2b40      	cmp	r3, #64	; 0x40
 8005a84:	d005      	beq.n	8005a92 <USBD_StdItfReq+0x26>
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d852      	bhi.n	8005b30 <USBD_StdItfReq+0xc4>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <USBD_StdItfReq+0x26>
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	d14e      	bne.n	8005b30 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d840      	bhi.n	8005b22 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	889b      	ldrh	r3, [r3, #4]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d836      	bhi.n	8005b18 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	889b      	ldrh	r3, [r3, #4]
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff fed9 	bl	800586a <USBD_CoreFindIF>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005abc:	7bbb      	ldrb	r3, [r7, #14]
 8005abe:	2bff      	cmp	r3, #255	; 0xff
 8005ac0:	d01d      	beq.n	8005afe <USBD_StdItfReq+0x92>
 8005ac2:	7bbb      	ldrb	r3, [r7, #14]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d11a      	bne.n	8005afe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005ac8:	7bba      	ldrb	r2, [r7, #14]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	32ae      	adds	r2, #174	; 0xae
 8005ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00f      	beq.n	8005af8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005ad8:	7bba      	ldrb	r2, [r7, #14]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ae0:	7bba      	ldrb	r2, [r7, #14]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	32ae      	adds	r2, #174	; 0xae
 8005ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	4798      	blx	r3
 8005af2:	4603      	mov	r3, r0
 8005af4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005af6:	e004      	b.n	8005b02 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005af8:	2303      	movs	r3, #3
 8005afa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005afc:	e001      	b.n	8005b02 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005afe:	2303      	movs	r3, #3
 8005b00:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	88db      	ldrh	r3, [r3, #6]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d110      	bne.n	8005b2c <USBD_StdItfReq+0xc0>
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10d      	bne.n	8005b2c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fdc7 	bl	80066a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005b16:	e009      	b.n	8005b2c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005b18:	6839      	ldr	r1, [r7, #0]
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fcf7 	bl	800650e <USBD_CtlError>
          break;
 8005b20:	e004      	b.n	8005b2c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005b22:	6839      	ldr	r1, [r7, #0]
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fcf2 	bl	800650e <USBD_CtlError>
          break;
 8005b2a:	e000      	b.n	8005b2e <USBD_StdItfReq+0xc2>
          break;
 8005b2c:	bf00      	nop
      }
      break;
 8005b2e:	e004      	b.n	8005b3a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fceb 	bl	800650e <USBD_CtlError>
      break;
 8005b38:	bf00      	nop
  }

  return ret;
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	889b      	ldrh	r3, [r3, #4]
 8005b56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b60:	2b40      	cmp	r3, #64	; 0x40
 8005b62:	d007      	beq.n	8005b74 <USBD_StdEPReq+0x30>
 8005b64:	2b40      	cmp	r3, #64	; 0x40
 8005b66:	f200 817f 	bhi.w	8005e68 <USBD_StdEPReq+0x324>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d02a      	beq.n	8005bc4 <USBD_StdEPReq+0x80>
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	f040 817a 	bne.w	8005e68 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005b74:	7bbb      	ldrb	r3, [r7, #14]
 8005b76:	4619      	mov	r1, r3
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7ff fe83 	bl	8005884 <USBD_CoreFindEP>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b82:	7b7b      	ldrb	r3, [r7, #13]
 8005b84:	2bff      	cmp	r3, #255	; 0xff
 8005b86:	f000 8174 	beq.w	8005e72 <USBD_StdEPReq+0x32e>
 8005b8a:	7b7b      	ldrb	r3, [r7, #13]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f040 8170 	bne.w	8005e72 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005b92:	7b7a      	ldrb	r2, [r7, #13]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005b9a:	7b7a      	ldrb	r2, [r7, #13]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	32ae      	adds	r2, #174	; 0xae
 8005ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 8163 	beq.w	8005e72 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005bac:	7b7a      	ldrb	r2, [r7, #13]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	32ae      	adds	r2, #174	; 0xae
 8005bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	4798      	blx	r3
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005bc2:	e156      	b.n	8005e72 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	785b      	ldrb	r3, [r3, #1]
 8005bc8:	2b03      	cmp	r3, #3
 8005bca:	d008      	beq.n	8005bde <USBD_StdEPReq+0x9a>
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	f300 8145 	bgt.w	8005e5c <USBD_StdEPReq+0x318>
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 809b 	beq.w	8005d0e <USBD_StdEPReq+0x1ca>
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d03c      	beq.n	8005c56 <USBD_StdEPReq+0x112>
 8005bdc:	e13e      	b.n	8005e5c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d002      	beq.n	8005bf0 <USBD_StdEPReq+0xac>
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d016      	beq.n	8005c1c <USBD_StdEPReq+0xd8>
 8005bee:	e02c      	b.n	8005c4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bf0:	7bbb      	ldrb	r3, [r7, #14]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00d      	beq.n	8005c12 <USBD_StdEPReq+0xce>
 8005bf6:	7bbb      	ldrb	r3, [r7, #14]
 8005bf8:	2b80      	cmp	r3, #128	; 0x80
 8005bfa:	d00a      	beq.n	8005c12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005bfc:	7bbb      	ldrb	r3, [r7, #14]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f001 f93d 	bl	8006e80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c06:	2180      	movs	r1, #128	; 0x80
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f001 f939 	bl	8006e80 <USBD_LL_StallEP>
 8005c0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c10:	e020      	b.n	8005c54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005c12:	6839      	ldr	r1, [r7, #0]
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fc7a 	bl	800650e <USBD_CtlError>
              break;
 8005c1a:	e01b      	b.n	8005c54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	885b      	ldrh	r3, [r3, #2]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10e      	bne.n	8005c42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c24:	7bbb      	ldrb	r3, [r7, #14]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00b      	beq.n	8005c42 <USBD_StdEPReq+0xfe>
 8005c2a:	7bbb      	ldrb	r3, [r7, #14]
 8005c2c:	2b80      	cmp	r3, #128	; 0x80
 8005c2e:	d008      	beq.n	8005c42 <USBD_StdEPReq+0xfe>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	88db      	ldrh	r3, [r3, #6]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d104      	bne.n	8005c42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c38:	7bbb      	ldrb	r3, [r7, #14]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f001 f91f 	bl	8006e80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fd2e 	bl	80066a4 <USBD_CtlSendStatus>

              break;
 8005c48:	e004      	b.n	8005c54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 fc5e 	bl	800650e <USBD_CtlError>
              break;
 8005c52:	bf00      	nop
          }
          break;
 8005c54:	e107      	b.n	8005e66 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d002      	beq.n	8005c68 <USBD_StdEPReq+0x124>
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d016      	beq.n	8005c94 <USBD_StdEPReq+0x150>
 8005c66:	e04b      	b.n	8005d00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c68:	7bbb      	ldrb	r3, [r7, #14]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00d      	beq.n	8005c8a <USBD_StdEPReq+0x146>
 8005c6e:	7bbb      	ldrb	r3, [r7, #14]
 8005c70:	2b80      	cmp	r3, #128	; 0x80
 8005c72:	d00a      	beq.n	8005c8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c74:	7bbb      	ldrb	r3, [r7, #14]
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f001 f901 	bl	8006e80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c7e:	2180      	movs	r1, #128	; 0x80
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 f8fd 	bl	8006e80 <USBD_LL_StallEP>
 8005c86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c88:	e040      	b.n	8005d0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005c8a:	6839      	ldr	r1, [r7, #0]
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fc3e 	bl	800650e <USBD_CtlError>
              break;
 8005c92:	e03b      	b.n	8005d0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	885b      	ldrh	r3, [r3, #2]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d136      	bne.n	8005d0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c9c:	7bbb      	ldrb	r3, [r7, #14]
 8005c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ca6:	7bbb      	ldrb	r3, [r7, #14]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f001 f907 	bl	8006ebe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fcf7 	bl	80066a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005cb6:	7bbb      	ldrb	r3, [r7, #14]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7ff fde2 	bl	8005884 <USBD_CoreFindEP>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005cc4:	7b7b      	ldrb	r3, [r7, #13]
 8005cc6:	2bff      	cmp	r3, #255	; 0xff
 8005cc8:	d01f      	beq.n	8005d0a <USBD_StdEPReq+0x1c6>
 8005cca:	7b7b      	ldrb	r3, [r7, #13]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d11c      	bne.n	8005d0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005cd0:	7b7a      	ldrb	r2, [r7, #13]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005cd8:	7b7a      	ldrb	r2, [r7, #13]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	32ae      	adds	r2, #174	; 0xae
 8005cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d010      	beq.n	8005d0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ce8:	7b7a      	ldrb	r2, [r7, #13]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	32ae      	adds	r2, #174	; 0xae
 8005cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	6839      	ldr	r1, [r7, #0]
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	4798      	blx	r3
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005cfe:	e004      	b.n	8005d0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005d00:	6839      	ldr	r1, [r7, #0]
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fc03 	bl	800650e <USBD_CtlError>
              break;
 8005d08:	e000      	b.n	8005d0c <USBD_StdEPReq+0x1c8>
              break;
 8005d0a:	bf00      	nop
          }
          break;
 8005d0c:	e0ab      	b.n	8005e66 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d002      	beq.n	8005d20 <USBD_StdEPReq+0x1dc>
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d032      	beq.n	8005d84 <USBD_StdEPReq+0x240>
 8005d1e:	e097      	b.n	8005e50 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d20:	7bbb      	ldrb	r3, [r7, #14]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d007      	beq.n	8005d36 <USBD_StdEPReq+0x1f2>
 8005d26:	7bbb      	ldrb	r3, [r7, #14]
 8005d28:	2b80      	cmp	r3, #128	; 0x80
 8005d2a:	d004      	beq.n	8005d36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005d2c:	6839      	ldr	r1, [r7, #0]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fbed 	bl	800650e <USBD_CtlError>
                break;
 8005d34:	e091      	b.n	8005e5a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	da0b      	bge.n	8005d56 <USBD_StdEPReq+0x212>
 8005d3e:	7bbb      	ldrb	r3, [r7, #14]
 8005d40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d44:	4613      	mov	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	3310      	adds	r3, #16
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	4413      	add	r3, r2
 8005d52:	3304      	adds	r3, #4
 8005d54:	e00b      	b.n	8005d6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d56:	7bbb      	ldrb	r3, [r7, #14]
 8005d58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2202      	movs	r2, #2
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fc37 	bl	80065f0 <USBD_CtlSendData>
              break;
 8005d82:	e06a      	b.n	8005e5a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005d84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	da11      	bge.n	8005db0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005d8c:	7bbb      	ldrb	r3, [r7, #14]
 8005d8e:	f003 020f 	and.w	r2, r3, #15
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	4613      	mov	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	440b      	add	r3, r1
 8005d9e:	3324      	adds	r3, #36	; 0x24
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d117      	bne.n	8005dd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fbb0 	bl	800650e <USBD_CtlError>
                  break;
 8005dae:	e054      	b.n	8005e5a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005db0:	7bbb      	ldrb	r3, [r7, #14]
 8005db2:	f003 020f 	and.w	r2, r3, #15
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	4613      	mov	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	440b      	add	r3, r1
 8005dc2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d104      	bne.n	8005dd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005dcc:	6839      	ldr	r1, [r7, #0]
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fb9d 	bl	800650e <USBD_CtlError>
                  break;
 8005dd4:	e041      	b.n	8005e5a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	da0b      	bge.n	8005df6 <USBD_StdEPReq+0x2b2>
 8005dde:	7bbb      	ldrb	r3, [r7, #14]
 8005de0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	3310      	adds	r3, #16
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	4413      	add	r3, r2
 8005df2:	3304      	adds	r3, #4
 8005df4:	e00b      	b.n	8005e0e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005df6:	7bbb      	ldrb	r3, [r7, #14]
 8005df8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e10:	7bbb      	ldrb	r3, [r7, #14]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <USBD_StdEPReq+0x2d8>
 8005e16:	7bbb      	ldrb	r3, [r7, #14]
 8005e18:	2b80      	cmp	r3, #128	; 0x80
 8005e1a:	d103      	bne.n	8005e24 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	e00e      	b.n	8005e42 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005e24:	7bbb      	ldrb	r3, [r7, #14]
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f001 f867 	bl	8006efc <USBD_LL_IsStallEP>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2201      	movs	r2, #1
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e002      	b.n	8005e42 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2202      	movs	r2, #2
 8005e46:	4619      	mov	r1, r3
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fbd1 	bl	80065f0 <USBD_CtlSendData>
              break;
 8005e4e:	e004      	b.n	8005e5a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fb5b 	bl	800650e <USBD_CtlError>
              break;
 8005e58:	bf00      	nop
          }
          break;
 8005e5a:	e004      	b.n	8005e66 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fb55 	bl	800650e <USBD_CtlError>
          break;
 8005e64:	bf00      	nop
      }
      break;
 8005e66:	e005      	b.n	8005e74 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fb4f 	bl	800650e <USBD_CtlError>
      break;
 8005e70:	e000      	b.n	8005e74 <USBD_StdEPReq+0x330>
      break;
 8005e72:	bf00      	nop
  }

  return ret;
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	885b      	ldrh	r3, [r3, #2]
 8005e9a:	0a1b      	lsrs	r3, r3, #8
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	2b06      	cmp	r3, #6
 8005ea2:	f200 8128 	bhi.w	80060f6 <USBD_GetDescriptor+0x276>
 8005ea6:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <USBD_GetDescriptor+0x2c>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005ec9 	.word	0x08005ec9
 8005eb0:	08005ee1 	.word	0x08005ee1
 8005eb4:	08005f21 	.word	0x08005f21
 8005eb8:	080060f7 	.word	0x080060f7
 8005ebc:	080060f7 	.word	0x080060f7
 8005ec0:	08006097 	.word	0x08006097
 8005ec4:	080060c3 	.word	0x080060c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	7c12      	ldrb	r2, [r2, #16]
 8005ed4:	f107 0108 	add.w	r1, r7, #8
 8005ed8:	4610      	mov	r0, r2
 8005eda:	4798      	blx	r3
 8005edc:	60f8      	str	r0, [r7, #12]
      break;
 8005ede:	e112      	b.n	8006106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	7c1b      	ldrb	r3, [r3, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10d      	bne.n	8005f04 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef0:	f107 0208 	add.w	r2, r7, #8
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	4798      	blx	r3
 8005ef8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3301      	adds	r3, #1
 8005efe:	2202      	movs	r2, #2
 8005f00:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005f02:	e100      	b.n	8006106 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0c:	f107 0208 	add.w	r2, r7, #8
 8005f10:	4610      	mov	r0, r2
 8005f12:	4798      	blx	r3
 8005f14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	701a      	strb	r2, [r3, #0]
      break;
 8005f1e:	e0f2      	b.n	8006106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	885b      	ldrh	r3, [r3, #2]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b05      	cmp	r3, #5
 8005f28:	f200 80ac 	bhi.w	8006084 <USBD_GetDescriptor+0x204>
 8005f2c:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <USBD_GetDescriptor+0xb4>)
 8005f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f32:	bf00      	nop
 8005f34:	08005f4d 	.word	0x08005f4d
 8005f38:	08005f81 	.word	0x08005f81
 8005f3c:	08005fb5 	.word	0x08005fb5
 8005f40:	08005fe9 	.word	0x08005fe9
 8005f44:	0800601d 	.word	0x0800601d
 8005f48:	08006051 	.word	0x08006051
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00b      	beq.n	8005f70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	7c12      	ldrb	r2, [r2, #16]
 8005f64:	f107 0108 	add.w	r1, r7, #8
 8005f68:	4610      	mov	r0, r2
 8005f6a:	4798      	blx	r3
 8005f6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f6e:	e091      	b.n	8006094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f70:	6839      	ldr	r1, [r7, #0]
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 facb 	bl	800650e <USBD_CtlError>
            err++;
 8005f78:	7afb      	ldrb	r3, [r7, #11]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	72fb      	strb	r3, [r7, #11]
          break;
 8005f7e:	e089      	b.n	8006094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00b      	beq.n	8005fa4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	7c12      	ldrb	r2, [r2, #16]
 8005f98:	f107 0108 	add.w	r1, r7, #8
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	4798      	blx	r3
 8005fa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fa2:	e077      	b.n	8006094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fab1 	bl	800650e <USBD_CtlError>
            err++;
 8005fac:	7afb      	ldrb	r3, [r7, #11]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	72fb      	strb	r3, [r7, #11]
          break;
 8005fb2:	e06f      	b.n	8006094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00b      	beq.n	8005fd8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	7c12      	ldrb	r2, [r2, #16]
 8005fcc:	f107 0108 	add.w	r1, r7, #8
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4798      	blx	r3
 8005fd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fd6:	e05d      	b.n	8006094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fa97 	bl	800650e <USBD_CtlError>
            err++;
 8005fe0:	7afb      	ldrb	r3, [r7, #11]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	72fb      	strb	r3, [r7, #11]
          break;
 8005fe6:	e055      	b.n	8006094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00b      	beq.n	800600c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	7c12      	ldrb	r2, [r2, #16]
 8006000:	f107 0108 	add.w	r1, r7, #8
 8006004:	4610      	mov	r0, r2
 8006006:	4798      	blx	r3
 8006008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800600a:	e043      	b.n	8006094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fa7d 	bl	800650e <USBD_CtlError>
            err++;
 8006014:	7afb      	ldrb	r3, [r7, #11]
 8006016:	3301      	adds	r3, #1
 8006018:	72fb      	strb	r3, [r7, #11]
          break;
 800601a:	e03b      	b.n	8006094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00b      	beq.n	8006040 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	7c12      	ldrb	r2, [r2, #16]
 8006034:	f107 0108 	add.w	r1, r7, #8
 8006038:	4610      	mov	r0, r2
 800603a:	4798      	blx	r3
 800603c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800603e:	e029      	b.n	8006094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006040:	6839      	ldr	r1, [r7, #0]
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fa63 	bl	800650e <USBD_CtlError>
            err++;
 8006048:	7afb      	ldrb	r3, [r7, #11]
 800604a:	3301      	adds	r3, #1
 800604c:	72fb      	strb	r3, [r7, #11]
          break;
 800604e:	e021      	b.n	8006094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	7c12      	ldrb	r2, [r2, #16]
 8006068:	f107 0108 	add.w	r1, r7, #8
 800606c:	4610      	mov	r0, r2
 800606e:	4798      	blx	r3
 8006070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006072:	e00f      	b.n	8006094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fa49 	bl	800650e <USBD_CtlError>
            err++;
 800607c:	7afb      	ldrb	r3, [r7, #11]
 800607e:	3301      	adds	r3, #1
 8006080:	72fb      	strb	r3, [r7, #11]
          break;
 8006082:	e007      	b.n	8006094 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006084:	6839      	ldr	r1, [r7, #0]
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fa41 	bl	800650e <USBD_CtlError>
          err++;
 800608c:	7afb      	ldrb	r3, [r7, #11]
 800608e:	3301      	adds	r3, #1
 8006090:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006092:	bf00      	nop
      }
      break;
 8006094:	e037      	b.n	8006106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	7c1b      	ldrb	r3, [r3, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d109      	bne.n	80060b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a6:	f107 0208 	add.w	r2, r7, #8
 80060aa:	4610      	mov	r0, r2
 80060ac:	4798      	blx	r3
 80060ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060b0:	e029      	b.n	8006106 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80060b2:	6839      	ldr	r1, [r7, #0]
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fa2a 	bl	800650e <USBD_CtlError>
        err++;
 80060ba:	7afb      	ldrb	r3, [r7, #11]
 80060bc:	3301      	adds	r3, #1
 80060be:	72fb      	strb	r3, [r7, #11]
      break;
 80060c0:	e021      	b.n	8006106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	7c1b      	ldrb	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10d      	bne.n	80060e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d2:	f107 0208 	add.w	r2, r7, #8
 80060d6:	4610      	mov	r0, r2
 80060d8:	4798      	blx	r3
 80060da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	3301      	adds	r3, #1
 80060e0:	2207      	movs	r2, #7
 80060e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060e4:	e00f      	b.n	8006106 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fa10 	bl	800650e <USBD_CtlError>
        err++;
 80060ee:	7afb      	ldrb	r3, [r7, #11]
 80060f0:	3301      	adds	r3, #1
 80060f2:	72fb      	strb	r3, [r7, #11]
      break;
 80060f4:	e007      	b.n	8006106 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fa08 	bl	800650e <USBD_CtlError>
      err++;
 80060fe:	7afb      	ldrb	r3, [r7, #11]
 8006100:	3301      	adds	r3, #1
 8006102:	72fb      	strb	r3, [r7, #11]
      break;
 8006104:	bf00      	nop
  }

  if (err != 0U)
 8006106:	7afb      	ldrb	r3, [r7, #11]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d11e      	bne.n	800614a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	88db      	ldrh	r3, [r3, #6]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d016      	beq.n	8006142 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006114:	893b      	ldrh	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00e      	beq.n	8006138 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	88da      	ldrh	r2, [r3, #6]
 800611e:	893b      	ldrh	r3, [r7, #8]
 8006120:	4293      	cmp	r3, r2
 8006122:	bf28      	it	cs
 8006124:	4613      	movcs	r3, r2
 8006126:	b29b      	uxth	r3, r3
 8006128:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800612a:	893b      	ldrh	r3, [r7, #8]
 800612c:	461a      	mov	r2, r3
 800612e:	68f9      	ldr	r1, [r7, #12]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fa5d 	bl	80065f0 <USBD_CtlSendData>
 8006136:	e009      	b.n	800614c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f9e7 	bl	800650e <USBD_CtlError>
 8006140:	e004      	b.n	800614c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 faae 	bl	80066a4 <USBD_CtlSendStatus>
 8006148:	e000      	b.n	800614c <USBD_GetDescriptor+0x2cc>
    return;
 800614a:	bf00      	nop
  }
}
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop

08006154 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	889b      	ldrh	r3, [r3, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d131      	bne.n	80061ca <USBD_SetAddress+0x76>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	88db      	ldrh	r3, [r3, #6]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d12d      	bne.n	80061ca <USBD_SetAddress+0x76>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	885b      	ldrh	r3, [r3, #2]
 8006172:	2b7f      	cmp	r3, #127	; 0x7f
 8006174:	d829      	bhi.n	80061ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	885b      	ldrh	r3, [r3, #2]
 800617a:	b2db      	uxtb	r3, r3
 800617c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006180:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b03      	cmp	r3, #3
 800618c:	d104      	bne.n	8006198 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f9bc 	bl	800650e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006196:	e01d      	b.n	80061d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	7bfa      	ldrb	r2, [r7, #15]
 800619c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fed5 	bl	8006f54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fa7a 	bl	80066a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d004      	beq.n	80061c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2202      	movs	r2, #2
 80061ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061be:	e009      	b.n	80061d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061c8:	e004      	b.n	80061d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f99e 	bl	800650e <USBD_CtlError>
  }
}
 80061d2:	bf00      	nop
 80061d4:	bf00      	nop
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	885b      	ldrh	r3, [r3, #2]
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	4b4e      	ldr	r3, [pc, #312]	; (800632c <USBD_SetConfig+0x150>)
 80061f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80061f4:	4b4d      	ldr	r3, [pc, #308]	; (800632c <USBD_SetConfig+0x150>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d905      	bls.n	8006208 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f985 	bl	800650e <USBD_CtlError>
    return USBD_FAIL;
 8006204:	2303      	movs	r3, #3
 8006206:	e08c      	b.n	8006322 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b02      	cmp	r3, #2
 8006212:	d002      	beq.n	800621a <USBD_SetConfig+0x3e>
 8006214:	2b03      	cmp	r3, #3
 8006216:	d029      	beq.n	800626c <USBD_SetConfig+0x90>
 8006218:	e075      	b.n	8006306 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800621a:	4b44      	ldr	r3, [pc, #272]	; (800632c <USBD_SetConfig+0x150>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d020      	beq.n	8006264 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006222:	4b42      	ldr	r3, [pc, #264]	; (800632c <USBD_SetConfig+0x150>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800622c:	4b3f      	ldr	r3, [pc, #252]	; (800632c <USBD_SetConfig+0x150>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	4619      	mov	r1, r3
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7fe ffe7 	bl	8005206 <USBD_SetClassConfig>
 8006238:	4603      	mov	r3, r0
 800623a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800623c:	7bfb      	ldrb	r3, [r7, #15]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d008      	beq.n	8006254 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006242:	6839      	ldr	r1, [r7, #0]
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f962 	bl	800650e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2202      	movs	r2, #2
 800624e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006252:	e065      	b.n	8006320 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fa25 	bl	80066a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2203      	movs	r2, #3
 800625e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006262:	e05d      	b.n	8006320 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fa1d 	bl	80066a4 <USBD_CtlSendStatus>
      break;
 800626a:	e059      	b.n	8006320 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800626c:	4b2f      	ldr	r3, [pc, #188]	; (800632c <USBD_SetConfig+0x150>)
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d112      	bne.n	800629a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800627c:	4b2b      	ldr	r3, [pc, #172]	; (800632c <USBD_SetConfig+0x150>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	461a      	mov	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006286:	4b29      	ldr	r3, [pc, #164]	; (800632c <USBD_SetConfig+0x150>)
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7fe ffd6 	bl	800523e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fa06 	bl	80066a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006298:	e042      	b.n	8006320 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800629a:	4b24      	ldr	r3, [pc, #144]	; (800632c <USBD_SetConfig+0x150>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d02a      	beq.n	80062fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	4619      	mov	r1, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7fe ffc4 	bl	800523e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80062b6:	4b1d      	ldr	r3, [pc, #116]	; (800632c <USBD_SetConfig+0x150>)
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80062c0:	4b1a      	ldr	r3, [pc, #104]	; (800632c <USBD_SetConfig+0x150>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fe ff9d 	bl	8005206 <USBD_SetClassConfig>
 80062cc:	4603      	mov	r3, r0
 80062ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00f      	beq.n	80062f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80062d6:	6839      	ldr	r1, [r7, #0]
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f918 	bl	800650e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7fe ffa9 	bl	800523e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80062f4:	e014      	b.n	8006320 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f9d4 	bl	80066a4 <USBD_CtlSendStatus>
      break;
 80062fc:	e010      	b.n	8006320 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f9d0 	bl	80066a4 <USBD_CtlSendStatus>
      break;
 8006304:	e00c      	b.n	8006320 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f900 	bl	800650e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800630e:	4b07      	ldr	r3, [pc, #28]	; (800632c <USBD_SetConfig+0x150>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7fe ff92 	bl	800523e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800631a:	2303      	movs	r3, #3
 800631c:	73fb      	strb	r3, [r7, #15]
      break;
 800631e:	bf00      	nop
  }

  return ret;
 8006320:	7bfb      	ldrb	r3, [r7, #15]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20000170 	.word	0x20000170

08006330 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	88db      	ldrh	r3, [r3, #6]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d004      	beq.n	800634c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006342:	6839      	ldr	r1, [r7, #0]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f8e2 	bl	800650e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800634a:	e023      	b.n	8006394 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	dc02      	bgt.n	800635e <USBD_GetConfig+0x2e>
 8006358:	2b00      	cmp	r3, #0
 800635a:	dc03      	bgt.n	8006364 <USBD_GetConfig+0x34>
 800635c:	e015      	b.n	800638a <USBD_GetConfig+0x5a>
 800635e:	2b03      	cmp	r3, #3
 8006360:	d00b      	beq.n	800637a <USBD_GetConfig+0x4a>
 8006362:	e012      	b.n	800638a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3308      	adds	r3, #8
 800636e:	2201      	movs	r2, #1
 8006370:	4619      	mov	r1, r3
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f93c 	bl	80065f0 <USBD_CtlSendData>
        break;
 8006378:	e00c      	b.n	8006394 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3304      	adds	r3, #4
 800637e:	2201      	movs	r2, #1
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f934 	bl	80065f0 <USBD_CtlSendData>
        break;
 8006388:	e004      	b.n	8006394 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 f8be 	bl	800650e <USBD_CtlError>
        break;
 8006392:	bf00      	nop
}
 8006394:	bf00      	nop
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d81e      	bhi.n	80063f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	88db      	ldrh	r3, [r3, #6]
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d004      	beq.n	80063c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f8a5 	bl	800650e <USBD_CtlError>
        break;
 80063c4:	e01a      	b.n	80063fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d005      	beq.n	80063e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f043 0202 	orr.w	r2, r3, #2
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	330c      	adds	r3, #12
 80063e6:	2202      	movs	r2, #2
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f900 	bl	80065f0 <USBD_CtlSendData>
      break;
 80063f0:	e004      	b.n	80063fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f88a 	bl	800650e <USBD_CtlError>
      break;
 80063fa:	bf00      	nop
  }
}
 80063fc:	bf00      	nop
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	885b      	ldrh	r3, [r3, #2]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d107      	bne.n	8006426 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f940 	bl	80066a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006424:	e013      	b.n	800644e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	885b      	ldrh	r3, [r3, #2]
 800642a:	2b02      	cmp	r3, #2
 800642c:	d10b      	bne.n	8006446 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	889b      	ldrh	r3, [r3, #4]
 8006432:	0a1b      	lsrs	r3, r3, #8
 8006434:	b29b      	uxth	r3, r3
 8006436:	b2da      	uxtb	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f930 	bl	80066a4 <USBD_CtlSendStatus>
}
 8006444:	e003      	b.n	800644e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f860 	bl	800650e <USBD_CtlError>
}
 800644e:	bf00      	nop
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b082      	sub	sp, #8
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006466:	b2db      	uxtb	r3, r3
 8006468:	3b01      	subs	r3, #1
 800646a:	2b02      	cmp	r3, #2
 800646c:	d80b      	bhi.n	8006486 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	885b      	ldrh	r3, [r3, #2]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d10c      	bne.n	8006490 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f910 	bl	80066a4 <USBD_CtlSendStatus>
      }
      break;
 8006484:	e004      	b.n	8006490 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f840 	bl	800650e <USBD_CtlError>
      break;
 800648e:	e000      	b.n	8006492 <USBD_ClrFeature+0x3c>
      break;
 8006490:	bf00      	nop
  }
}
 8006492:	bf00      	nop
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b084      	sub	sp, #16
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	781a      	ldrb	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3301      	adds	r3, #1
 80064b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	781a      	ldrb	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3301      	adds	r3, #1
 80064c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f7ff fa41 	bl	800594c <SWAPBYTE>
 80064ca:	4603      	mov	r3, r0
 80064cc:	461a      	mov	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3301      	adds	r3, #1
 80064d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3301      	adds	r3, #1
 80064dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f7ff fa34 	bl	800594c <SWAPBYTE>
 80064e4:	4603      	mov	r3, r0
 80064e6:	461a      	mov	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3301      	adds	r3, #1
 80064f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3301      	adds	r3, #1
 80064f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f7ff fa27 	bl	800594c <SWAPBYTE>
 80064fe:	4603      	mov	r3, r0
 8006500:	461a      	mov	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	80da      	strh	r2, [r3, #6]
}
 8006506:	bf00      	nop
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b082      	sub	sp, #8
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006518:	2180      	movs	r1, #128	; 0x80
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fcb0 	bl	8006e80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006520:	2100      	movs	r1, #0
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fcac 	bl	8006e80 <USBD_LL_StallEP>
}
 8006528:	bf00      	nop
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d036      	beq.n	80065b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800654a:	6938      	ldr	r0, [r7, #16]
 800654c:	f000 f836 	bl	80065bc <USBD_GetLen>
 8006550:	4603      	mov	r3, r0
 8006552:	3301      	adds	r3, #1
 8006554:	b29b      	uxth	r3, r3
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	b29a      	uxth	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800655e:	7dfb      	ldrb	r3, [r7, #23]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	4413      	add	r3, r2
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	7812      	ldrb	r2, [r2, #0]
 8006568:	701a      	strb	r2, [r3, #0]
  idx++;
 800656a:	7dfb      	ldrb	r3, [r7, #23]
 800656c:	3301      	adds	r3, #1
 800656e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006570:	7dfb      	ldrb	r3, [r7, #23]
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	4413      	add	r3, r2
 8006576:	2203      	movs	r2, #3
 8006578:	701a      	strb	r2, [r3, #0]
  idx++;
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	3301      	adds	r3, #1
 800657e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006580:	e013      	b.n	80065aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006582:	7dfb      	ldrb	r3, [r7, #23]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	4413      	add	r3, r2
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	7812      	ldrb	r2, [r2, #0]
 800658c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	3301      	adds	r3, #1
 8006592:	613b      	str	r3, [r7, #16]
    idx++;
 8006594:	7dfb      	ldrb	r3, [r7, #23]
 8006596:	3301      	adds	r3, #1
 8006598:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800659a:	7dfb      	ldrb	r3, [r7, #23]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	4413      	add	r3, r2
 80065a0:	2200      	movs	r2, #0
 80065a2:	701a      	strb	r2, [r3, #0]
    idx++;
 80065a4:	7dfb      	ldrb	r3, [r7, #23]
 80065a6:	3301      	adds	r3, #1
 80065a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e7      	bne.n	8006582 <USBD_GetString+0x52>
 80065b2:	e000      	b.n	80065b6 <USBD_GetString+0x86>
    return;
 80065b4:	bf00      	nop
  }
}
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80065cc:	e005      	b.n	80065da <USBD_GetLen+0x1e>
  {
    len++;
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
 80065d0:	3301      	adds	r3, #1
 80065d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	3301      	adds	r3, #1
 80065d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1f5      	bne.n	80065ce <USBD_GetLen+0x12>
  }

  return len;
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2202      	movs	r2, #2
 8006600:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	2100      	movs	r1, #0
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 fcbb 	bl	8006f92 <USBD_LL_Transmit>

  return USBD_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	2100      	movs	r1, #0
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 fcaa 	bl	8006f92 <USBD_LL_Transmit>

  return USBD_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2203      	movs	r2, #3
 8006658:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	2100      	movs	r1, #0
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 fcae 	bl	8006fd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b084      	sub	sp, #16
 8006686:	af00      	add	r7, sp, #0
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	2100      	movs	r1, #0
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 fc9d 	bl	8006fd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2204      	movs	r2, #4
 80066b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80066b4:	2300      	movs	r3, #0
 80066b6:	2200      	movs	r2, #0
 80066b8:	2100      	movs	r1, #0
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fc69 	bl	8006f92 <USBD_LL_Transmit>

  return USBD_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2205      	movs	r2, #5
 80066d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066da:	2300      	movs	r3, #0
 80066dc:	2200      	movs	r2, #0
 80066de:	2100      	movs	r1, #0
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fc77 	bl	8006fd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80066f4:	2200      	movs	r2, #0
 80066f6:	4912      	ldr	r1, [pc, #72]	; (8006740 <MX_USB_DEVICE_Init+0x50>)
 80066f8:	4812      	ldr	r0, [pc, #72]	; (8006744 <MX_USB_DEVICE_Init+0x54>)
 80066fa:	f7fe fd07 	bl	800510c <USBD_Init>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006704:	f7f9 ffe0 	bl	80006c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006708:	490f      	ldr	r1, [pc, #60]	; (8006748 <MX_USB_DEVICE_Init+0x58>)
 800670a:	480e      	ldr	r0, [pc, #56]	; (8006744 <MX_USB_DEVICE_Init+0x54>)
 800670c:	f7fe fd2e 	bl	800516c <USBD_RegisterClass>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006716:	f7f9 ffd7 	bl	80006c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800671a:	490c      	ldr	r1, [pc, #48]	; (800674c <MX_USB_DEVICE_Init+0x5c>)
 800671c:	4809      	ldr	r0, [pc, #36]	; (8006744 <MX_USB_DEVICE_Init+0x54>)
 800671e:	f7fe fc65 	bl	8004fec <USBD_CDC_RegisterInterface>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006728:	f7f9 ffce 	bl	80006c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800672c:	4805      	ldr	r0, [pc, #20]	; (8006744 <MX_USB_DEVICE_Init+0x54>)
 800672e:	f7fe fd53 	bl	80051d8 <USBD_Start>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006738:	f7f9 ffc6 	bl	80006c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800673c:	bf00      	nop
 800673e:	bd80      	pop	{r7, pc}
 8006740:	200000ac 	.word	0x200000ac
 8006744:	20000174 	.word	0x20000174
 8006748:	20000018 	.word	0x20000018
 800674c:	20000098 	.word	0x20000098

08006750 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006754:	2200      	movs	r2, #0
 8006756:	4905      	ldr	r1, [pc, #20]	; (800676c <CDC_Init_FS+0x1c>)
 8006758:	4805      	ldr	r0, [pc, #20]	; (8006770 <CDC_Init_FS+0x20>)
 800675a:	f7fe fc61 	bl	8005020 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800675e:	4905      	ldr	r1, [pc, #20]	; (8006774 <CDC_Init_FS+0x24>)
 8006760:	4803      	ldr	r0, [pc, #12]	; (8006770 <CDC_Init_FS+0x20>)
 8006762:	f7fe fc7f 	bl	8005064 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006766:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006768:	4618      	mov	r0, r3
 800676a:	bd80      	pop	{r7, pc}
 800676c:	20000850 	.word	0x20000850
 8006770:	20000174 	.word	0x20000174
 8006774:	20000450 	.word	0x20000450

08006778 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006778:	b480      	push	{r7}
 800677a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800677c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800677e:	4618      	mov	r0, r3
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	4603      	mov	r3, r0
 8006790:	6039      	str	r1, [r7, #0]
 8006792:	71fb      	strb	r3, [r7, #7]
 8006794:	4613      	mov	r3, r2
 8006796:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	2b23      	cmp	r3, #35	; 0x23
 800679c:	d84a      	bhi.n	8006834 <CDC_Control_FS+0xac>
 800679e:	a201      	add	r2, pc, #4	; (adr r2, 80067a4 <CDC_Control_FS+0x1c>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	08006835 	.word	0x08006835
 80067a8:	08006835 	.word	0x08006835
 80067ac:	08006835 	.word	0x08006835
 80067b0:	08006835 	.word	0x08006835
 80067b4:	08006835 	.word	0x08006835
 80067b8:	08006835 	.word	0x08006835
 80067bc:	08006835 	.word	0x08006835
 80067c0:	08006835 	.word	0x08006835
 80067c4:	08006835 	.word	0x08006835
 80067c8:	08006835 	.word	0x08006835
 80067cc:	08006835 	.word	0x08006835
 80067d0:	08006835 	.word	0x08006835
 80067d4:	08006835 	.word	0x08006835
 80067d8:	08006835 	.word	0x08006835
 80067dc:	08006835 	.word	0x08006835
 80067e0:	08006835 	.word	0x08006835
 80067e4:	08006835 	.word	0x08006835
 80067e8:	08006835 	.word	0x08006835
 80067ec:	08006835 	.word	0x08006835
 80067f0:	08006835 	.word	0x08006835
 80067f4:	08006835 	.word	0x08006835
 80067f8:	08006835 	.word	0x08006835
 80067fc:	08006835 	.word	0x08006835
 8006800:	08006835 	.word	0x08006835
 8006804:	08006835 	.word	0x08006835
 8006808:	08006835 	.word	0x08006835
 800680c:	08006835 	.word	0x08006835
 8006810:	08006835 	.word	0x08006835
 8006814:	08006835 	.word	0x08006835
 8006818:	08006835 	.word	0x08006835
 800681c:	08006835 	.word	0x08006835
 8006820:	08006835 	.word	0x08006835
 8006824:	08006835 	.word	0x08006835
 8006828:	08006835 	.word	0x08006835
 800682c:	08006835 	.word	0x08006835
 8006830:	08006835 	.word	0x08006835
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006834:	bf00      	nop
  }

  return (USBD_OK);
 8006836:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006838:	4618      	mov	r0, r3
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	4805      	ldr	r0, [pc, #20]	; (8006868 <CDC_Receive_FS+0x24>)
 8006852:	f7fe fc07 	bl	8005064 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006856:	4804      	ldr	r0, [pc, #16]	; (8006868 <CDC_Receive_FS+0x24>)
 8006858:	f7fe fc22 	bl	80050a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800685c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800685e:	4618      	mov	r0, r3
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20000174 	.word	0x20000174

0800686c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	4613      	mov	r3, r2
 8006878:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800687e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006882:	4618      	mov	r0, r3
 8006884:	371c      	adds	r7, #28
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
	...

08006890 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	4603      	mov	r3, r0
 8006898:	6039      	str	r1, [r7, #0]
 800689a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	2212      	movs	r2, #18
 80068a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80068a2:	4b03      	ldr	r3, [pc, #12]	; (80068b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	200000c8 	.word	0x200000c8

080068b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	4603      	mov	r3, r0
 80068bc:	6039      	str	r1, [r7, #0]
 80068be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2204      	movs	r2, #4
 80068c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80068c6:	4b03      	ldr	r3, [pc, #12]	; (80068d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	200000dc 	.word	0x200000dc

080068d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	4603      	mov	r3, r0
 80068e0:	6039      	str	r1, [r7, #0]
 80068e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d105      	bne.n	80068f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	4907      	ldr	r1, [pc, #28]	; (800690c <USBD_FS_ProductStrDescriptor+0x34>)
 80068ee:	4808      	ldr	r0, [pc, #32]	; (8006910 <USBD_FS_ProductStrDescriptor+0x38>)
 80068f0:	f7ff fe1e 	bl	8006530 <USBD_GetString>
 80068f4:	e004      	b.n	8006900 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	4904      	ldr	r1, [pc, #16]	; (800690c <USBD_FS_ProductStrDescriptor+0x34>)
 80068fa:	4805      	ldr	r0, [pc, #20]	; (8006910 <USBD_FS_ProductStrDescriptor+0x38>)
 80068fc:	f7ff fe18 	bl	8006530 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006900:	4b02      	ldr	r3, [pc, #8]	; (800690c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000c50 	.word	0x20000c50
 8006910:	08007134 	.word	0x08007134

08006914 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	4603      	mov	r3, r0
 800691c:	6039      	str	r1, [r7, #0]
 800691e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	4904      	ldr	r1, [pc, #16]	; (8006934 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006924:	4804      	ldr	r0, [pc, #16]	; (8006938 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006926:	f7ff fe03 	bl	8006530 <USBD_GetString>
  return USBD_StrDesc;
 800692a:	4b02      	ldr	r3, [pc, #8]	; (8006934 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	20000c50 	.word	0x20000c50
 8006938:	0800714c 	.word	0x0800714c

0800693c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	4603      	mov	r3, r0
 8006944:	6039      	str	r1, [r7, #0]
 8006946:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	221a      	movs	r2, #26
 800694c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800694e:	f000 f843 	bl	80069d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006952:	4b02      	ldr	r3, [pc, #8]	; (800695c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006954:	4618      	mov	r0, r3
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	200000e0 	.word	0x200000e0

08006960 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	4603      	mov	r3, r0
 8006968:	6039      	str	r1, [r7, #0]
 800696a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800696c:	79fb      	ldrb	r3, [r7, #7]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d105      	bne.n	800697e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	4907      	ldr	r1, [pc, #28]	; (8006994 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006976:	4808      	ldr	r0, [pc, #32]	; (8006998 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006978:	f7ff fdda 	bl	8006530 <USBD_GetString>
 800697c:	e004      	b.n	8006988 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	4904      	ldr	r1, [pc, #16]	; (8006994 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006982:	4805      	ldr	r0, [pc, #20]	; (8006998 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006984:	f7ff fdd4 	bl	8006530 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006988:	4b02      	ldr	r3, [pc, #8]	; (8006994 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	20000c50 	.word	0x20000c50
 8006998:	08007160 	.word	0x08007160

0800699c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	4603      	mov	r3, r0
 80069a4:	6039      	str	r1, [r7, #0]
 80069a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80069a8:	79fb      	ldrb	r3, [r7, #7]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d105      	bne.n	80069ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	4907      	ldr	r1, [pc, #28]	; (80069d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80069b2:	4808      	ldr	r0, [pc, #32]	; (80069d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80069b4:	f7ff fdbc 	bl	8006530 <USBD_GetString>
 80069b8:	e004      	b.n	80069c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	4904      	ldr	r1, [pc, #16]	; (80069d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80069be:	4805      	ldr	r0, [pc, #20]	; (80069d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80069c0:	f7ff fdb6 	bl	8006530 <USBD_GetString>
  }
  return USBD_StrDesc;
 80069c4:	4b02      	ldr	r3, [pc, #8]	; (80069d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	20000c50 	.word	0x20000c50
 80069d4:	0800716c 	.word	0x0800716c

080069d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80069de:	4b0f      	ldr	r3, [pc, #60]	; (8006a1c <Get_SerialNum+0x44>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80069e4:	4b0e      	ldr	r3, [pc, #56]	; (8006a20 <Get_SerialNum+0x48>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80069ea:	4b0e      	ldr	r3, [pc, #56]	; (8006a24 <Get_SerialNum+0x4c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4413      	add	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d009      	beq.n	8006a12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80069fe:	2208      	movs	r2, #8
 8006a00:	4909      	ldr	r1, [pc, #36]	; (8006a28 <Get_SerialNum+0x50>)
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 f814 	bl	8006a30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006a08:	2204      	movs	r2, #4
 8006a0a:	4908      	ldr	r1, [pc, #32]	; (8006a2c <Get_SerialNum+0x54>)
 8006a0c:	68b8      	ldr	r0, [r7, #8]
 8006a0e:	f000 f80f 	bl	8006a30 <IntToUnicode>
  }
}
 8006a12:	bf00      	nop
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	1fff7a10 	.word	0x1fff7a10
 8006a20:	1fff7a14 	.word	0x1fff7a14
 8006a24:	1fff7a18 	.word	0x1fff7a18
 8006a28:	200000e2 	.word	0x200000e2
 8006a2c:	200000f2 	.word	0x200000f2

08006a30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006a42:	2300      	movs	r3, #0
 8006a44:	75fb      	strb	r3, [r7, #23]
 8006a46:	e027      	b.n	8006a98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	0f1b      	lsrs	r3, r3, #28
 8006a4c:	2b09      	cmp	r3, #9
 8006a4e:	d80b      	bhi.n	8006a68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	0f1b      	lsrs	r3, r3, #28
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	440b      	add	r3, r1
 8006a60:	3230      	adds	r2, #48	; 0x30
 8006a62:	b2d2      	uxtb	r2, r2
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	e00a      	b.n	8006a7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	0f1b      	lsrs	r3, r3, #28
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	7dfb      	ldrb	r3, [r7, #23]
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	4619      	mov	r1, r3
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	440b      	add	r3, r1
 8006a78:	3237      	adds	r2, #55	; 0x37
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006a84:	7dfb      	ldrb	r3, [r7, #23]
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	3301      	adds	r3, #1
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	2200      	movs	r2, #0
 8006a90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006a92:	7dfb      	ldrb	r3, [r7, #23]
 8006a94:	3301      	adds	r3, #1
 8006a96:	75fb      	strb	r3, [r7, #23]
 8006a98:	7dfa      	ldrb	r2, [r7, #23]
 8006a9a:	79fb      	ldrb	r3, [r7, #7]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d3d3      	bcc.n	8006a48 <IntToUnicode+0x18>
  }
}
 8006aa0:	bf00      	nop
 8006aa2:	bf00      	nop
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
	...

08006ab0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08a      	sub	sp, #40	; 0x28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ab8:	f107 0314 	add.w	r3, r7, #20
 8006abc:	2200      	movs	r2, #0
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	605a      	str	r2, [r3, #4]
 8006ac2:	609a      	str	r2, [r3, #8]
 8006ac4:	60da      	str	r2, [r3, #12]
 8006ac6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ad0:	d13a      	bne.n	8006b48 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	613b      	str	r3, [r7, #16]
 8006ad6:	4b1e      	ldr	r3, [pc, #120]	; (8006b50 <HAL_PCD_MspInit+0xa0>)
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ada:	4a1d      	ldr	r2, [pc, #116]	; (8006b50 <HAL_PCD_MspInit+0xa0>)
 8006adc:	f043 0301 	orr.w	r3, r3, #1
 8006ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ae2:	4b1b      	ldr	r3, [pc, #108]	; (8006b50 <HAL_PCD_MspInit+0xa0>)
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	613b      	str	r3, [r7, #16]
 8006aec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006aee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006af4:	2302      	movs	r3, #2
 8006af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af8:	2300      	movs	r3, #0
 8006afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006afc:	2303      	movs	r3, #3
 8006afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006b00:	230a      	movs	r3, #10
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b04:	f107 0314 	add.w	r3, r7, #20
 8006b08:	4619      	mov	r1, r3
 8006b0a:	4812      	ldr	r0, [pc, #72]	; (8006b54 <HAL_PCD_MspInit+0xa4>)
 8006b0c:	f7fa f872 	bl	8000bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006b10:	4b0f      	ldr	r3, [pc, #60]	; (8006b50 <HAL_PCD_MspInit+0xa0>)
 8006b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b14:	4a0e      	ldr	r2, [pc, #56]	; (8006b50 <HAL_PCD_MspInit+0xa0>)
 8006b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b1a:	6353      	str	r3, [r2, #52]	; 0x34
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	4b0b      	ldr	r3, [pc, #44]	; (8006b50 <HAL_PCD_MspInit+0xa0>)
 8006b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b24:	4a0a      	ldr	r2, [pc, #40]	; (8006b50 <HAL_PCD_MspInit+0xa0>)
 8006b26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b2a:	6453      	str	r3, [r2, #68]	; 0x44
 8006b2c:	4b08      	ldr	r3, [pc, #32]	; (8006b50 <HAL_PCD_MspInit+0xa0>)
 8006b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006b38:	2200      	movs	r2, #0
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	2043      	movs	r0, #67	; 0x43
 8006b3e:	f7fa f822 	bl	8000b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006b42:	2043      	movs	r0, #67	; 0x43
 8006b44:	f7fa f83b 	bl	8000bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006b48:	bf00      	nop
 8006b4a:	3728      	adds	r7, #40	; 0x28
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	40023800 	.word	0x40023800
 8006b54:	40020000 	.word	0x40020000

08006b58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f7fe fb7f 	bl	8005272 <USBD_LL_SetupStage>
}
 8006b74:	bf00      	nop
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	460b      	mov	r3, r1
 8006b86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006b8e:	78fa      	ldrb	r2, [r7, #3]
 8006b90:	6879      	ldr	r1, [r7, #4]
 8006b92:	4613      	mov	r3, r2
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	4413      	add	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	440b      	add	r3, r1
 8006b9c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	78fb      	ldrb	r3, [r7, #3]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	f7fe fbb9 	bl	800531c <USBD_LL_DataOutStage>
}
 8006baa:	bf00      	nop
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006bc4:	78fa      	ldrb	r2, [r7, #3]
 8006bc6:	6879      	ldr	r1, [r7, #4]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	00db      	lsls	r3, r3, #3
 8006bcc:	4413      	add	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	440b      	add	r3, r1
 8006bd2:	334c      	adds	r3, #76	; 0x4c
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	78fb      	ldrb	r3, [r7, #3]
 8006bd8:	4619      	mov	r1, r3
 8006bda:	f7fe fc52 	bl	8005482 <USBD_LL_DataInStage>
}
 8006bde:	bf00      	nop
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b082      	sub	sp, #8
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fe fd86 	bl	8005706 <USBD_LL_SOF>
}
 8006bfa:	bf00      	nop
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d001      	beq.n	8006c1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006c16:	f7f9 fd57 	bl	80006c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c20:	7bfa      	ldrb	r2, [r7, #15]
 8006c22:	4611      	mov	r1, r2
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fe fd30 	bl	800568a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7fe fcd8 	bl	80055e6 <USBD_LL_Reset>
}
 8006c36:	bf00      	nop
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
	...

08006c40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fe fd2b 	bl	80056aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6812      	ldr	r2, [r2, #0]
 8006c62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c66:	f043 0301 	orr.w	r3, r3, #1
 8006c6a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d005      	beq.n	8006c80 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c74:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <HAL_PCD_SuspendCallback+0x48>)
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	4a03      	ldr	r2, [pc, #12]	; (8006c88 <HAL_PCD_SuspendCallback+0x48>)
 8006c7a:	f043 0306 	orr.w	r3, r3, #6
 8006c7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c80:	bf00      	nop
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	e000ed00 	.word	0xe000ed00

08006c8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fd1b 	bl	80056d6 <USBD_LL_Resume>
}
 8006ca0:	bf00      	nop
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cba:	78fa      	ldrb	r2, [r7, #3]
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fe fd73 	bl	80057aa <USBD_LL_IsoOUTIncomplete>
}
 8006cc4:	bf00      	nop
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cde:	78fa      	ldrb	r2, [r7, #3]
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe fd2f 	bl	8005746 <USBD_LL_IsoINIncomplete>
}
 8006ce8:	bf00      	nop
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fe fd85 	bl	800580e <USBD_LL_DevConnected>
}
 8006d04:	bf00      	nop
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe fd82 	bl	8005824 <USBD_LL_DevDisconnected>
}
 8006d20:	bf00      	nop
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d13c      	bne.n	8006db2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006d38:	4a20      	ldr	r2, [pc, #128]	; (8006dbc <USBD_LL_Init+0x94>)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a1e      	ldr	r2, [pc, #120]	; (8006dbc <USBD_LL_Init+0x94>)
 8006d44:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006d48:	4b1c      	ldr	r3, [pc, #112]	; (8006dbc <USBD_LL_Init+0x94>)
 8006d4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006d4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006d50:	4b1a      	ldr	r3, [pc, #104]	; (8006dbc <USBD_LL_Init+0x94>)
 8006d52:	2204      	movs	r2, #4
 8006d54:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006d56:	4b19      	ldr	r3, [pc, #100]	; (8006dbc <USBD_LL_Init+0x94>)
 8006d58:	2202      	movs	r2, #2
 8006d5a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006d5c:	4b17      	ldr	r3, [pc, #92]	; (8006dbc <USBD_LL_Init+0x94>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006d62:	4b16      	ldr	r3, [pc, #88]	; (8006dbc <USBD_LL_Init+0x94>)
 8006d64:	2202      	movs	r2, #2
 8006d66:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006d68:	4b14      	ldr	r3, [pc, #80]	; (8006dbc <USBD_LL_Init+0x94>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006d6e:	4b13      	ldr	r3, [pc, #76]	; (8006dbc <USBD_LL_Init+0x94>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006d74:	4b11      	ldr	r3, [pc, #68]	; (8006dbc <USBD_LL_Init+0x94>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006d7a:	4b10      	ldr	r3, [pc, #64]	; (8006dbc <USBD_LL_Init+0x94>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006d80:	4b0e      	ldr	r3, [pc, #56]	; (8006dbc <USBD_LL_Init+0x94>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006d86:	480d      	ldr	r0, [pc, #52]	; (8006dbc <USBD_LL_Init+0x94>)
 8006d88:	f7fa fa20 	bl	80011cc <HAL_PCD_Init>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006d92:	f7f9 fc99 	bl	80006c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006d96:	2180      	movs	r1, #128	; 0x80
 8006d98:	4808      	ldr	r0, [pc, #32]	; (8006dbc <USBD_LL_Init+0x94>)
 8006d9a:	f7fb fc78 	bl	800268e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006d9e:	2240      	movs	r2, #64	; 0x40
 8006da0:	2100      	movs	r1, #0
 8006da2:	4806      	ldr	r0, [pc, #24]	; (8006dbc <USBD_LL_Init+0x94>)
 8006da4:	f7fb fc2c 	bl	8002600 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006da8:	2280      	movs	r2, #128	; 0x80
 8006daa:	2101      	movs	r1, #1
 8006dac:	4803      	ldr	r0, [pc, #12]	; (8006dbc <USBD_LL_Init+0x94>)
 8006dae:	f7fb fc27 	bl	8002600 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	20000e50 	.word	0x20000e50

08006dc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fa fb15 	bl	8001406 <HAL_PCD_Start>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 f942 	bl	800706c <USBD_Get_USB_Status>
 8006de8:	4603      	mov	r3, r0
 8006dea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dec:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	4608      	mov	r0, r1
 8006e00:	4611      	mov	r1, r2
 8006e02:	461a      	mov	r2, r3
 8006e04:	4603      	mov	r3, r0
 8006e06:	70fb      	strb	r3, [r7, #3]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70bb      	strb	r3, [r7, #2]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006e1e:	78bb      	ldrb	r3, [r7, #2]
 8006e20:	883a      	ldrh	r2, [r7, #0]
 8006e22:	78f9      	ldrb	r1, [r7, #3]
 8006e24:	f7fa ffe6 	bl	8001df4 <HAL_PCD_EP_Open>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 f91c 	bl	800706c <USBD_Get_USB_Status>
 8006e34:	4603      	mov	r3, r0
 8006e36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e38:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e5c:	78fa      	ldrb	r2, [r7, #3]
 8006e5e:	4611      	mov	r1, r2
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fb f82f 	bl	8001ec4 <HAL_PCD_EP_Close>
 8006e66:	4603      	mov	r3, r0
 8006e68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 f8fd 	bl	800706c <USBD_Get_USB_Status>
 8006e72:	4603      	mov	r3, r0
 8006e74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e9a:	78fa      	ldrb	r2, [r7, #3]
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fb f907 	bl	80020b2 <HAL_PCD_EP_SetStall>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 f8de 	bl	800706c <USBD_Get_USB_Status>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ed8:	78fa      	ldrb	r2, [r7, #3]
 8006eda:	4611      	mov	r1, r2
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7fb f94c 	bl	800217a <HAL_PCD_EP_ClrStall>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 f8bf 	bl	800706c <USBD_Get_USB_Status>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006f10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	da0b      	bge.n	8006f30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006f18:	78fb      	ldrb	r3, [r7, #3]
 8006f1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f1e:	68f9      	ldr	r1, [r7, #12]
 8006f20:	4613      	mov	r3, r2
 8006f22:	00db      	lsls	r3, r3, #3
 8006f24:	4413      	add	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	440b      	add	r3, r1
 8006f2a:	333e      	adds	r3, #62	; 0x3e
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	e00b      	b.n	8006f48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006f30:	78fb      	ldrb	r3, [r7, #3]
 8006f32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f36:	68f9      	ldr	r1, [r7, #12]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	00db      	lsls	r3, r3, #3
 8006f3c:	4413      	add	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	440b      	add	r3, r1
 8006f42:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006f46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f6e:	78fa      	ldrb	r2, [r7, #3]
 8006f70:	4611      	mov	r1, r2
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fa ff19 	bl	8001daa <HAL_PCD_SetAddress>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 f874 	bl	800706c <USBD_Get_USB_Status>
 8006f84:	4603      	mov	r3, r0
 8006f86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f88:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b086      	sub	sp, #24
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	60f8      	str	r0, [r7, #12]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006fb0:	7af9      	ldrb	r1, [r7, #11]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	f7fb f832 	bl	800201e <HAL_PCD_EP_Transmit>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fbe:	7dfb      	ldrb	r3, [r7, #23]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f000 f853 	bl	800706c <USBD_Get_USB_Status>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006fca:	7dbb      	ldrb	r3, [r7, #22]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3718      	adds	r7, #24
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	607a      	str	r2, [r7, #4]
 8006fde:	603b      	str	r3, [r7, #0]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006ff2:	7af9      	ldrb	r1, [r7, #11]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	f7fa ffae 	bl	8001f58 <HAL_PCD_EP_Receive>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007000:	7dfb      	ldrb	r3, [r7, #23]
 8007002:	4618      	mov	r0, r3
 8007004:	f000 f832 	bl	800706c <USBD_Get_USB_Status>
 8007008:	4603      	mov	r3, r0
 800700a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800700c:	7dbb      	ldrb	r3, [r7, #22]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	460b      	mov	r3, r1
 8007020:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007028:	78fa      	ldrb	r2, [r7, #3]
 800702a:	4611      	mov	r1, r2
 800702c:	4618      	mov	r0, r3
 800702e:	f7fa ffde 	bl	8001fee <HAL_PCD_EP_GetRxCount>
 8007032:	4603      	mov	r3, r0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007044:	4b03      	ldr	r3, [pc, #12]	; (8007054 <USBD_static_malloc+0x18>)
}
 8007046:	4618      	mov	r0, r3
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	2000135c 	.word	0x2000135c

08007058 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]

}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	4603      	mov	r3, r0
 8007074:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800707a:	79fb      	ldrb	r3, [r7, #7]
 800707c:	2b03      	cmp	r3, #3
 800707e:	d817      	bhi.n	80070b0 <USBD_Get_USB_Status+0x44>
 8007080:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <USBD_Get_USB_Status+0x1c>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	08007099 	.word	0x08007099
 800708c:	0800709f 	.word	0x0800709f
 8007090:	080070a5 	.word	0x080070a5
 8007094:	080070ab 	.word	0x080070ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	73fb      	strb	r3, [r7, #15]
    break;
 800709c:	e00b      	b.n	80070b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800709e:	2303      	movs	r3, #3
 80070a0:	73fb      	strb	r3, [r7, #15]
    break;
 80070a2:	e008      	b.n	80070b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80070a4:	2301      	movs	r3, #1
 80070a6:	73fb      	strb	r3, [r7, #15]
    break;
 80070a8:	e005      	b.n	80070b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80070aa:	2303      	movs	r3, #3
 80070ac:	73fb      	strb	r3, [r7, #15]
    break;
 80070ae:	e002      	b.n	80070b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80070b0:	2303      	movs	r3, #3
 80070b2:	73fb      	strb	r3, [r7, #15]
    break;
 80070b4:	bf00      	nop
  }
  return usb_status;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <memset>:
 80070c4:	4402      	add	r2, r0
 80070c6:	4603      	mov	r3, r0
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d100      	bne.n	80070ce <memset+0xa>
 80070cc:	4770      	bx	lr
 80070ce:	f803 1b01 	strb.w	r1, [r3], #1
 80070d2:	e7f9      	b.n	80070c8 <memset+0x4>

080070d4 <__libc_init_array>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	4d0d      	ldr	r5, [pc, #52]	; (800710c <__libc_init_array+0x38>)
 80070d8:	4c0d      	ldr	r4, [pc, #52]	; (8007110 <__libc_init_array+0x3c>)
 80070da:	1b64      	subs	r4, r4, r5
 80070dc:	10a4      	asrs	r4, r4, #2
 80070de:	2600      	movs	r6, #0
 80070e0:	42a6      	cmp	r6, r4
 80070e2:	d109      	bne.n	80070f8 <__libc_init_array+0x24>
 80070e4:	4d0b      	ldr	r5, [pc, #44]	; (8007114 <__libc_init_array+0x40>)
 80070e6:	4c0c      	ldr	r4, [pc, #48]	; (8007118 <__libc_init_array+0x44>)
 80070e8:	f000 f818 	bl	800711c <_init>
 80070ec:	1b64      	subs	r4, r4, r5
 80070ee:	10a4      	asrs	r4, r4, #2
 80070f0:	2600      	movs	r6, #0
 80070f2:	42a6      	cmp	r6, r4
 80070f4:	d105      	bne.n	8007102 <__libc_init_array+0x2e>
 80070f6:	bd70      	pop	{r4, r5, r6, pc}
 80070f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070fc:	4798      	blx	r3
 80070fe:	3601      	adds	r6, #1
 8007100:	e7ee      	b.n	80070e0 <__libc_init_array+0xc>
 8007102:	f855 3b04 	ldr.w	r3, [r5], #4
 8007106:	4798      	blx	r3
 8007108:	3601      	adds	r6, #1
 800710a:	e7f2      	b.n	80070f2 <__libc_init_array+0x1e>
 800710c:	0800719c 	.word	0x0800719c
 8007110:	0800719c 	.word	0x0800719c
 8007114:	0800719c 	.word	0x0800719c
 8007118:	080071a0 	.word	0x080071a0

0800711c <_init>:
 800711c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711e:	bf00      	nop
 8007120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007122:	bc08      	pop	{r3}
 8007124:	469e      	mov	lr, r3
 8007126:	4770      	bx	lr

08007128 <_fini>:
 8007128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712a:	bf00      	nop
 800712c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800712e:	bc08      	pop	{r3}
 8007130:	469e      	mov	lr, r3
 8007132:	4770      	bx	lr
